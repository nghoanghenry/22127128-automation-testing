{
  "stats": {
    "suites": 2,
    "tests": 85,
    "passes": 81,
    "pending": 0,
    "failures": 4,
    "start": "2025-08-23T15:34:34.828Z",
    "end": "2025-08-23T16:00:07.480Z",
    "duration": 1532652,
    "testsRegistered": 85,
    "passPercent": 95.29411764705881,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "c1673125-427e-46d0-b849-d4cec0f835af",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
          "title": "üìù Registration Test Suite",
          "fullFile": "C:\\demo-selenium\\tests\\mocha-data-driven.test.js",
          "file": "\\tests\\mocha-data-driven.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"üìù Registration Test Suite\"",
              "fullTitle": "üìù Registration Test Suite \"before all\" hook in \"üìù Registration Test Suite\"",
              "timedOut": false,
              "duration": 2070,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.setup);\nconsole.log(`\\nüöÄ Starting registration test with ${testUsers.length} users`);\n\ndriver = await createDriver(testConfig.browser, testConfig.headless);\nconsole.log('‚úÖ WebDriver initialized successfully for Registration');",
              "err": {},
              "uuid": "7d8b1039-70f9-4f82-bf01-a48c4c763c61",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"üìù Registration Test Suite\"",
              "fullTitle": "üìù Registration Test Suite \"after all\" hook in \"üìù Registration Test Suite\"",
              "timedOut": false,
              "duration": 80,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.setup);\nif (driver) {\n    await driver.quit();\n    console.log('‚úÖ Registration WebDriver closed successfully');\n}\n\nconsole.log(`\\nüìä Registration Results Summary:`);\nconsole.log(`‚úÖ Successful: ${successfulRegistrations.length}/${testUsers.length}`);\nconsole.log(`‚ö† Failed: ${failedRegistrations.length}/${testUsers.length}`);\n\nif (failedRegistrations.length > 0) {\n    console.log('\\n‚ö† Failed Registration Test Cases:');\n    failedRegistrations.forEach(tc => console.log(`  - ${tc}`));\n}",
              "err": {},
              "uuid": "b0ced6c4-b2f7-455a-9e76-1d30c23e853c",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "üìù Register Sign Up-TC01: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC01: Nguyen Van",
              "timedOut": false,
              "duration": 23334,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "8a611311-208f-4253-90ed-c91bf067a4ca",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC02: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC02: Nguyen Van",
              "timedOut": false,
              "duration": 7335,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "a068a1e7-87eb-4b19-b926-681ad9172bcb",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC03: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC03: Nguyen Van",
              "timedOut": false,
              "duration": 7357,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "210aeab3-501f-460d-a997-0b6b42124e86",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC04: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC04: Nguyen Van",
              "timedOut": false,
              "duration": 22661,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "ccd285a3-a13b-4946-8c38-78be10bd6b5c",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC05: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC05: Nguyen Van",
              "timedOut": false,
              "duration": 22713,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "e5ce6d44-35bb-4d45-ae95-32eaa901459c",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC06: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC06: Nguyen Van",
              "timedOut": false,
              "duration": 23005,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "b8c72fba-cdd9-4962-8d0e-943a26e66f2b",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC07: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC07: Nguyen Van",
              "timedOut": false,
              "duration": 22559,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "e854a2d7-328f-48f5-97f3-d9850ec84793",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC08: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC08: Nguyen Van",
              "timedOut": false,
              "duration": 7258,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "d656a7c0-c84d-4fc0-8be1-c084771c3f5f",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC09: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC09: Nguyen Van",
              "timedOut": false,
              "duration": 22897,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {
                "message": "AssertionError: Sign Up-TC09 expected Fail: expected 'Success' to equal 'Fail'",
                "estack": "AssertionError: Sign Up-TC09 expected Fail: expected 'Success' to equal 'Fail'\n    at Context.<anonymous> (file:///C:/demo-selenium/tests/mocha-data-driven.test.js:560:99)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- Success\n+ Fail\n"
              },
              "uuid": "fe6aabd7-ce1e-40c7-8748-0e79fb58be39",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC10: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC10: Nguyen Van",
              "timedOut": false,
              "duration": 22924,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "abb612ec-ab25-4b38-8361-1b6a59bd0642",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC11: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC11: Nguyen Van",
              "timedOut": false,
              "duration": 22321,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "9516129b-b1db-484a-aa5c-6ba84e9e71ad",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC12: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC12: Nguyen Van",
              "timedOut": false,
              "duration": 22443,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "2adf9478-6d4f-4d79-b138-a3138edd8faa",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC13: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC13: Nguyen Van",
              "timedOut": false,
              "duration": 22826,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "0d6283b3-66a8-4264-aea3-f50195fe0d03",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC14: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC14: Nguyen Van",
              "timedOut": false,
              "duration": 7347,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "6560dc17-bc92-4fe0-85de-30f431ea34eb",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC15:  Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC15:  Van",
              "timedOut": false,
              "duration": 7128,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "87cc4f21-c41d-4228-a6b5-bd6d0e8cb3cf",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC16: Nguy·ªÖn Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC16: Nguy·ªÖn Van",
              "timedOut": false,
              "duration": 7156,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "bd4c6163-372f-41ea-8613-acf1a182a65a",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC17: Nguyen123 Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC17: Nguyen123 Van",
              "timedOut": false,
              "duration": 7158,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "2fa13d14-18ea-46c3-a3cc-f835ba4cb1e8",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC18: Nguyen@# Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC18: Nguyen@# Van",
              "timedOut": false,
              "duration": 7188,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "6434d8a7-46a8-4fe3-b9fd-beef2dbbc773",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC19: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC19: Nguyen Van",
              "timedOut": false,
              "duration": 22562,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "1907a785-9616-4ec6-8c53-d54e71ab2d21",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC20: An Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC20: An Van",
              "timedOut": false,
              "duration": 22659,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "d7235b31-e39c-4101-a9c3-e2a987bf338d",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC21: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC21: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa Van",
              "timedOut": false,
              "duration": 22749,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "e1d4b903-9726-44be-9545-36a35fcba330",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC22: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC22: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa Van",
              "timedOut": false,
              "duration": 22459,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "44447857-35d7-4fe0-ba1b-eb6ca7ce34c8",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC23: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC23: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa Van",
              "timedOut": false,
              "duration": 7104,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "b3d9ff82-5903-4c75-9a7f-18f61c93c8df",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC24: Nguyen ",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC24: Nguyen ",
              "timedOut": false,
              "duration": 7136,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "1427faeb-593b-4ab4-afa2-bcb749f9f77c",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC25: Nguyen VƒÉn",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC25: Nguyen VƒÉn",
              "timedOut": false,
              "duration": 7115,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "0be968cb-0d97-4a6b-89d1-f962e4566b88",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC26: Nguyen Van123",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC26: Nguyen Van123",
              "timedOut": false,
              "duration": 7292,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "764d17dc-7bd2-488c-9a0a-3b5c27254f9f",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC27: Nguyen Van@#",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC27: Nguyen Van@#",
              "timedOut": false,
              "duration": 7041,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "a53c2baa-2433-4338-9729-aad64b1fd3fb",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC28: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC28: Nguyen Van",
              "timedOut": false,
              "duration": 22497,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "c786746c-27d0-45b4-8d18-0b00bd5f4e96",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC29: Nguyen An",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC29: Nguyen An",
              "timedOut": false,
              "duration": 22425,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "ded53850-9ed4-4453-8458-dcc26be33ca1",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC30: Nguyen aaaaaaaaaaaaaaaaaaa",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC30: Nguyen aaaaaaaaaaaaaaaaaaa",
              "timedOut": false,
              "duration": 22809,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "2705f891-5499-4674-bdef-e9b74ba6957a",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC31: Nguyen aaaaaaaaaaaaaaaaaaaa",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC31: Nguyen aaaaaaaaaaaaaaaaaaaa",
              "timedOut": false,
              "duration": 22759,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "d588152f-a854-4de0-beee-aebd85c17d0f",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC32: Nguyen aaaaaaaaaaaaaaaaaaaaa",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC32: Nguyen aaaaaaaaaaaaaaaaaaaaa",
              "timedOut": false,
              "duration": 7157,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "9c11fd74-82b2-4be2-8125-7cdeedf22dd3",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC33: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC33: Nguyen Van",
              "timedOut": false,
              "duration": 7200,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "dd364b36-385e-4347-978f-8e0e04415ea8",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC34: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC34: Nguyen Van",
              "timedOut": false,
              "duration": 22440,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "4d45f987-3b7b-43cf-abd5-d8587a547539",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC35: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC35: Nguyen Van",
              "timedOut": false,
              "duration": 23188,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "ae22116f-a29a-4200-b40a-42a65ce08853",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC36: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC36: Nguyen Van",
              "timedOut": false,
              "duration": 22377,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "b2837c5c-9da2-4717-9fa2-71a945ca0168",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC37: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC37: Nguyen Van",
              "timedOut": false,
              "duration": 22781,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "d04a3b34-2e15-476c-b34e-0905d45e8bc5",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC38: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC38: Nguyen Van",
              "timedOut": false,
              "duration": 22690,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {
                "message": "AssertionError: Sign Up-TC38 expected Fail: expected 'Success' to equal 'Fail'",
                "estack": "AssertionError: Sign Up-TC38 expected Fail: expected 'Success' to equal 'Fail'\n    at Context.<anonymous> (file:///C:/demo-selenium/tests/mocha-data-driven.test.js:560:99)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- Success\n+ Fail\n"
              },
              "uuid": "c68dd73c-24a0-43c0-9cc3-0e6dff6d8409",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC39: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC39: Nguyen Van",
              "timedOut": false,
              "duration": 7166,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "ebd0ed3e-4add-48ad-981e-407411cd6a16",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC40: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC40: Nguyen Van",
              "timedOut": false,
              "duration": 22842,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "1e80424b-29a6-4a1c-9269-89e79db25016",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC41: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC41: Nguyen Van",
              "timedOut": false,
              "duration": 22861,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "d1b4e664-b0ed-45a4-88fc-523a49ddb9a2",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC42: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC42: Nguyen Van",
              "timedOut": false,
              "duration": 22510,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "b06a8251-1c7d-4a2e-a444-443f300f4191",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC43: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC43: Nguyen Van",
              "timedOut": false,
              "duration": 22957,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "4a61af88-2760-4bd0-97c2-057bbca2c0a3",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC44: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC44: Nguyen Van",
              "timedOut": false,
              "duration": 7270,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "393de7f3-f905-446b-bc1c-8152d0a621eb",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC45: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC45: Nguyen Van",
              "timedOut": false,
              "duration": 7245,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "3cf770cf-aee0-4d00-b7ad-9bd6b8786bf2",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC46: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC46: Nguyen Van",
              "timedOut": false,
              "duration": 22643,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "ec1dcdf2-9941-4ea3-8e1a-b9f5e1085df1",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC47: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC47: Nguyen Van",
              "timedOut": false,
              "duration": 22523,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "18274e75-55ba-4751-935e-edfeb822d1fa",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC48: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC48: Nguyen Van",
              "timedOut": false,
              "duration": 23043,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "112c82a9-fb88-4d48-ac11-30c2b0e0c751",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC49: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC49: Nguyen Van",
              "timedOut": false,
              "duration": 22917,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "59dd6c62-224d-4a30-94cb-61406b023a1c",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC50: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC50: Nguyen Van",
              "timedOut": false,
              "duration": 7163,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "425f9ccb-5c0f-46f9-8523-01a99362a7ce",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC51: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC51: Nguyen Van",
              "timedOut": false,
              "duration": 7207,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "5abdfe19-d3b0-44e7-a78d-fdd23e3eef0d",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC52: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC52: Nguyen Van",
              "timedOut": false,
              "duration": 22602,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "e05b2182-c1d6-41c0-84c3-f6abd7c014ae",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC53: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC53: Nguyen Van",
              "timedOut": false,
              "duration": 22764,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "796906e6-6c23-4d71-9fab-8aae5c144732",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC54: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC54: Nguyen Van",
              "timedOut": false,
              "duration": 22532,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "1d8141af-a92d-449b-9a7e-541eb74e428d",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC55: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC55: Nguyen Van",
              "timedOut": false,
              "duration": 22890,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "c25d6c79-cfb5-437f-be3d-e6f6d584ac22",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC56: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC56: Nguyen Van",
              "timedOut": false,
              "duration": 7328,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "46328570-4294-449a-a581-da301b919efe",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC57: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC57: Nguyen Van",
              "timedOut": false,
              "duration": 28976,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "bd020918-0018-429c-9931-47b5b0446ff9",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC58: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC58: Nguyen Van",
              "timedOut": false,
              "duration": 22352,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "7fd08ff7-b519-4ea3-8623-803e0832d418",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC59: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC59: Nguyen Van",
              "timedOut": false,
              "duration": 29489,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {
                "message": "AssertionError: Sign Up-TC59 expected Success: expected 'Fail' to equal 'Success'",
                "estack": "AssertionError: Sign Up-TC59 expected Success: expected 'Fail' to equal 'Success'\n    at Context.<anonymous> (file:///C:/demo-selenium/tests/mocha-data-driven.test.js:560:99)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- Fail\n+ Success\n"
              },
              "uuid": "0ffea345-67d3-4e45-83fe-324841cb3edb",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC60: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC60: Nguyen Van",
              "timedOut": false,
              "duration": 7181,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "64d38b52-a0a7-498f-abc3-b9b7fe251f5a",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC61: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC61: Nguyen Van",
              "timedOut": false,
              "duration": 22652,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "a4134759-33a0-4331-9841-151777a56fe8",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC62: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC62: Nguyen Van",
              "timedOut": false,
              "duration": 22320,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "73d7a86c-f296-4538-a9bf-80916386f994",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC63: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC63: Nguyen Van",
              "timedOut": false,
              "duration": 22967,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "47249932-5f7d-4ba8-bbfe-9bc22ed47228",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC64: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC64: Nguyen Van",
              "timedOut": false,
              "duration": 22648,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "534803c9-698b-4bfe-86f8-587c5e49b289",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC65: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC65: Nguyen Van",
              "timedOut": false,
              "duration": 7185,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "8ba4873c-2715-4c82-8fce-be34a80bd7d0",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC66: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC66: Nguyen Van",
              "timedOut": false,
              "duration": 7078,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "32ead1b8-4364-4982-b865-ef616984124d",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC67: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC67: Nguyen Van",
              "timedOut": false,
              "duration": 22721,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "f8a51c4c-4ce9-44b1-b50b-350c4cad537d",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC68: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC68: Nguyen Van",
              "timedOut": false,
              "duration": 23021,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "ca1771db-9cc8-4e23-a20e-22aca8e5d792",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC69: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC69: Nguyen Van",
              "timedOut": false,
              "duration": 22487,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "a289b8c2-c06d-4cd7-8372-c2bba918ac9d",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC70: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC70: Nguyen Van",
              "timedOut": false,
              "duration": 22708,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "cc1f58a0-eb26-4dcd-978f-82071070b769",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC71: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC71: Nguyen Van",
              "timedOut": false,
              "duration": 7230,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "70579d4a-67a6-407c-8508-af5df6c6bc04",
              "parentUUID": "0a4b5118-9caa-40fb-8a52-4edb718333d4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8a611311-208f-4253-90ed-c91bf067a4ca",
            "a068a1e7-87eb-4b19-b926-681ad9172bcb",
            "210aeab3-501f-460d-a997-0b6b42124e86",
            "ccd285a3-a13b-4946-8c38-78be10bd6b5c",
            "e5ce6d44-35bb-4d45-ae95-32eaa901459c",
            "b8c72fba-cdd9-4962-8d0e-943a26e66f2b",
            "e854a2d7-328f-48f5-97f3-d9850ec84793",
            "d656a7c0-c84d-4fc0-8be1-c084771c3f5f",
            "abb612ec-ab25-4b38-8361-1b6a59bd0642",
            "9516129b-b1db-484a-aa5c-6ba84e9e71ad",
            "2adf9478-6d4f-4d79-b138-a3138edd8faa",
            "0d6283b3-66a8-4264-aea3-f50195fe0d03",
            "6560dc17-bc92-4fe0-85de-30f431ea34eb",
            "87cc4f21-c41d-4228-a6b5-bd6d0e8cb3cf",
            "bd4c6163-372f-41ea-8613-acf1a182a65a",
            "2fa13d14-18ea-46c3-a3cc-f835ba4cb1e8",
            "6434d8a7-46a8-4fe3-b9fd-beef2dbbc773",
            "1907a785-9616-4ec6-8c53-d54e71ab2d21",
            "d7235b31-e39c-4101-a9c3-e2a987bf338d",
            "e1d4b903-9726-44be-9545-36a35fcba330",
            "44447857-35d7-4fe0-ba1b-eb6ca7ce34c8",
            "b3d9ff82-5903-4c75-9a7f-18f61c93c8df",
            "1427faeb-593b-4ab4-afa2-bcb749f9f77c",
            "0be968cb-0d97-4a6b-89d1-f962e4566b88",
            "764d17dc-7bd2-488c-9a0a-3b5c27254f9f",
            "a53c2baa-2433-4338-9729-aad64b1fd3fb",
            "c786746c-27d0-45b4-8d18-0b00bd5f4e96",
            "ded53850-9ed4-4453-8458-dcc26be33ca1",
            "2705f891-5499-4674-bdef-e9b74ba6957a",
            "d588152f-a854-4de0-beee-aebd85c17d0f",
            "9c11fd74-82b2-4be2-8125-7cdeedf22dd3",
            "dd364b36-385e-4347-978f-8e0e04415ea8",
            "4d45f987-3b7b-43cf-abd5-d8587a547539",
            "ae22116f-a29a-4200-b40a-42a65ce08853",
            "b2837c5c-9da2-4717-9fa2-71a945ca0168",
            "d04a3b34-2e15-476c-b34e-0905d45e8bc5",
            "ebd0ed3e-4add-48ad-981e-407411cd6a16",
            "1e80424b-29a6-4a1c-9269-89e79db25016",
            "d1b4e664-b0ed-45a4-88fc-523a49ddb9a2",
            "b06a8251-1c7d-4a2e-a444-443f300f4191",
            "4a61af88-2760-4bd0-97c2-057bbca2c0a3",
            "393de7f3-f905-446b-bc1c-8152d0a621eb",
            "3cf770cf-aee0-4d00-b7ad-9bd6b8786bf2",
            "ec1dcdf2-9941-4ea3-8e1a-b9f5e1085df1",
            "18274e75-55ba-4751-935e-edfeb822d1fa",
            "112c82a9-fb88-4d48-ac11-30c2b0e0c751",
            "59dd6c62-224d-4a30-94cb-61406b023a1c",
            "425f9ccb-5c0f-46f9-8523-01a99362a7ce",
            "5abdfe19-d3b0-44e7-a78d-fdd23e3eef0d",
            "e05b2182-c1d6-41c0-84c3-f6abd7c014ae",
            "796906e6-6c23-4d71-9fab-8aae5c144732",
            "1d8141af-a92d-449b-9a7e-541eb74e428d",
            "c25d6c79-cfb5-437f-be3d-e6f6d584ac22",
            "46328570-4294-449a-a581-da301b919efe",
            "bd020918-0018-429c-9931-47b5b0446ff9",
            "7fd08ff7-b519-4ea3-8623-803e0832d418",
            "64d38b52-a0a7-498f-abc3-b9b7fe251f5a",
            "a4134759-33a0-4331-9841-151777a56fe8",
            "73d7a86c-f296-4538-a9bf-80916386f994",
            "47249932-5f7d-4ba8-bbfe-9bc22ed47228",
            "534803c9-698b-4bfe-86f8-587c5e49b289",
            "8ba4873c-2715-4c82-8fce-be34a80bd7d0",
            "32ead1b8-4364-4982-b865-ef616984124d",
            "f8a51c4c-4ce9-44b1-b50b-350c4cad537d",
            "ca1771db-9cc8-4e23-a20e-22aca8e5d792",
            "a289b8c2-c06d-4cd7-8372-c2bba918ac9d",
            "cc1f58a0-eb26-4dcd-978f-82071070b769",
            "70579d4a-67a6-407c-8508-af5df6c6bc04"
          ],
          "failures": [
            "fe6aabd7-ce1e-40c7-8748-0e79fb58be39",
            "c68dd73c-24a0-43c0-9cc3-0e6dff6d8409",
            "0ffea345-67d3-4e45-83fe-324841cb3edb"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1237528,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "0bae6370-9359-4a7a-8ccd-daef96a7548b",
          "title": "üîê Login Test Suite",
          "fullFile": "C:\\demo-selenium\\tests\\mocha-data-driven.test.js",
          "file": "\\tests\\mocha-data-driven.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"üîê Login Test Suite\"",
              "fullTitle": "üîê Login Test Suite \"before all\" hook in \"üîê Login Test Suite\"",
              "timedOut": false,
              "duration": 1072,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.setup);\nconsole.log(`\\nüöÄ Starting login test with ${testLogins.length} test cases`);\n\ndriver = await createDriver(testConfig.browser, testConfig.headless);\nconsole.log('‚úÖ WebDriver initialized successfully for Login');",
              "err": {},
              "uuid": "ba9cb24c-14f1-4ab0-a7b7-bd08732d017f",
              "parentUUID": "0bae6370-9359-4a7a-8ccd-daef96a7548b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"üîê Login Test Suite\"",
              "fullTitle": "üîê Login Test Suite \"after all\" hook in \"üîê Login Test Suite\"",
              "timedOut": false,
              "duration": 39,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.setup);\nif (driver) {\n    await driver.quit();\n    console.log('‚úÖ Login WebDriver closed successfully');\n}\n\nconsole.log(`\\nüìä Login Results Summary:`);\nconsole.log(`‚úÖ Successful: ${successfulLogins.length}/${testLogins.length}`);\nconsole.log(`‚ö† Failed: ${failedLogins.length}/${testLogins.length}`);\n\nif (failedLogins.length > 0) {\n    console.log('\\n‚ö† Failed Login Test Cases:');\n    failedLogins.forEach(tc => console.log(`  - ${tc}`));\n}",
              "err": {},
              "uuid": "d6f7ae15-f61e-4072-b1ff-a790e299bfd9",
              "parentUUID": "0bae6370-9359-4a7a-8ccd-daef96a7548b",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"üîê Login Test Suite\"",
              "fullTitle": "üîê Login Test Suite \"after each\" hook in \"üîê Login Test Suite\"",
              "timedOut": false,
              "duration": 1055,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    const userMenu = await driver.findElements(By.css('[data-test=\"nav-user-menu\"]'));\n    if (userMenu.length > 0) {\n        await userMenu[0].click();\n        await driver.wait(until.elementLocated(By.css('[data-test=\"nav-sign-out\"]')), testConfig.timeouts.elementWait);\n        await driver.findElement(By.css('[data-test=\"nav-sign-out\"]')).click();\n        console.log(\"üîÑ Logged out after test case\");\n    } else {\n        // N·∫øu kh√¥ng c√≥ user menu th√¨ xo√° cookie cho ch·∫Øc\n        await driver.manage().deleteAllCookies();\n        console.log(\"üßπ Cleared cookies after test case\");\n    }\n} catch (e) {\n    console.log(\"‚ö†Ô∏è Reset state failed:\", e.message);\n}",
              "err": {},
              "uuid": "b385e39f-43d5-4100-b0e8-153d1f8a5dc1",
              "parentUUID": "0bae6370-9359-4a7a-8ccd-daef96a7548b",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "üîê Login Sign In-TC01: abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvw@domain.com",
              "fullTitle": "üîê Login Test Suite üîê Login Sign In-TC01: abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvw@domain.com",
              "timedOut": false,
              "duration": 23734,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting login test ${index + 1}/${testLogins.length}: ${loginCase.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(3000);\n    \n    // Navigate to login page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    \n    // Wait for login form to load completely\n    await driver.wait(until.elementLocated(By.id('email')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill login form\n    console.log('üìã Filling login form...');\n    console.log(`üìß Email: ${loginCase.email}`);\n    console.log(`üîë Password: ${loginCase.password.replace(/./g, '*')}`);\n    \n    // Fill email field\n    await waitAndFillElement(driver, By.id('email'), loginCase.email);\n    \n    // Fill password field - Use specific selector for app-password-input\n    console.log('üîë Filling password field...');\n    const passwordElement = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordElement);\n    await driver.sleep(60);\n    await passwordElement.clear();\n    await passwordElement.sendKeys(loginCase.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Find and click submit button - Use specific selector from HTML\n    const submitSelectors = [\n        '[data-test=\"login-submit\"]',  // From your HTML: data-test=\"login-submit\"\n        'input[type=\"submit\"]',        // From your HTML: input type=\"submit\"\n        'input[value=\"Login\"]',        // From your HTML: value=\"Login\"\n        '.btnSubmit'                   // From your HTML: class=\"btnSubmit\"\n    ];\n    \n    let submitButton = null;\n    for (const selector of submitSelectors) {\n        try {\n            submitButton = await findElementWithRetry(driver, By.css(selector));\n            console.log(`‚úÖ Found submit button with selector: ${selector}`);\n            break;\n        } catch (error) {\n            console.log(`‚ö†Ô∏è Submit selector ${selector} not found, trying next...`);\n        }\n    }\n    \n    if (!submitButton) {\n        throw new Error('Could not find submit button');\n    }\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // For input[type=\"submit\"], use click() method\n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response\n    await driver.sleep(1000);\n    \n    // Check for error messages\n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result by URL or presence of dashboard elements\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = 'Fail'; // Default to fail\n    \n    // Check various success indicators\n    const successIndicators = [\n        () => {\n            const expectedUrl = 'http://localhost:4200/#/account';\n            const isAccountUrl = currentUrl === expectedUrl || currentUrl === expectedUrl + '/';\n            if (isAccountUrl) console.log(`‚úÖ URL kh·ªõp v·ªõi trang t√†i kho·∫£n: ${currentUrl}`);\n            return isAccountUrl;\n        },\n        async () => {\n            const userMenuSelectors = [\n                '[data-test=\"user-menu\"]',\n                '[data-test=\"logout\"]',\n                '.user-menu',\n                'a[href*=\"logout\"]',\n                'button[data-test*=\"logout\"]'\n            ];\n            for (const selector of userMenuSelectors) {\n                try {\n                    const element = await driver.findElement(By.css(selector));\n                    if (await element.isDisplayed()) {\n                        console.log(`‚úÖ T√¨m th·∫•y ph·∫ßn t·ª≠ ng∆∞·ªùi d√πng: ${selector}`);\n                        return true;\n                    }\n                } catch (e) {\n                    console.log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y selector ${selector}`);\n                }\n            }\n            return false;\n        },\n    ];\n    \n    // Test success indicators\n    for (const indicator of successIndicators) {\n        try {\n            const isSuccess = typeof indicator === 'function' ? await indicator() : indicator;\n            if (isSuccess) {\n                actualResult = 'Success';\n                break;\n            }\n        } catch (error) {\n            // Continue to next indicator\n        }\n    }\n    \n    \n    // Log results\n    if (actualResult === 'Success') {\n        successfulLogins.push(loginCase);\n        console.log(`‚úÖ ${loginCase.testCaseID}: Login SUCCESS`);\n        console.log(`   Current URL: ${currentUrl}`);\n    } else {\n        failedLogins.push(loginCase.testCaseID);\n        console.log(`‚ö† ${loginCase.testCaseID}: Login FAILED`);\n        console.log(`   Current URL: ${currentUrl}`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result\n    expect(actualResult, `${loginCase.testCaseID} expected ${loginCase.expectedResult}`).to.equal(loginCase.expectedResult);\n    \n} catch (error) {\n    failedLogins.push(loginCase.testCaseID);\n    console.log(`‚ö† ${loginCase.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, loginCase.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "8a5b3c94-845b-45ff-a15a-1c989c8d9afb",
              "parentUUID": "0bae6370-9359-4a7a-8ccd-daef96a7548b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üîê Login Sign In-TC02: user@domain",
              "fullTitle": "üîê Login Test Suite üîê Login Sign In-TC02: user@domain",
              "timedOut": false,
              "duration": 13076,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting login test ${index + 1}/${testLogins.length}: ${loginCase.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(3000);\n    \n    // Navigate to login page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    \n    // Wait for login form to load completely\n    await driver.wait(until.elementLocated(By.id('email')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill login form\n    console.log('üìã Filling login form...');\n    console.log(`üìß Email: ${loginCase.email}`);\n    console.log(`üîë Password: ${loginCase.password.replace(/./g, '*')}`);\n    \n    // Fill email field\n    await waitAndFillElement(driver, By.id('email'), loginCase.email);\n    \n    // Fill password field - Use specific selector for app-password-input\n    console.log('üîë Filling password field...');\n    const passwordElement = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordElement);\n    await driver.sleep(60);\n    await passwordElement.clear();\n    await passwordElement.sendKeys(loginCase.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Find and click submit button - Use specific selector from HTML\n    const submitSelectors = [\n        '[data-test=\"login-submit\"]',  // From your HTML: data-test=\"login-submit\"\n        'input[type=\"submit\"]',        // From your HTML: input type=\"submit\"\n        'input[value=\"Login\"]',        // From your HTML: value=\"Login\"\n        '.btnSubmit'                   // From your HTML: class=\"btnSubmit\"\n    ];\n    \n    let submitButton = null;\n    for (const selector of submitSelectors) {\n        try {\n            submitButton = await findElementWithRetry(driver, By.css(selector));\n            console.log(`‚úÖ Found submit button with selector: ${selector}`);\n            break;\n        } catch (error) {\n            console.log(`‚ö†Ô∏è Submit selector ${selector} not found, trying next...`);\n        }\n    }\n    \n    if (!submitButton) {\n        throw new Error('Could not find submit button');\n    }\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // For input[type=\"submit\"], use click() method\n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response\n    await driver.sleep(1000);\n    \n    // Check for error messages\n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result by URL or presence of dashboard elements\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = 'Fail'; // Default to fail\n    \n    // Check various success indicators\n    const successIndicators = [\n        () => {\n            const expectedUrl = 'http://localhost:4200/#/account';\n            const isAccountUrl = currentUrl === expectedUrl || currentUrl === expectedUrl + '/';\n            if (isAccountUrl) console.log(`‚úÖ URL kh·ªõp v·ªõi trang t√†i kho·∫£n: ${currentUrl}`);\n            return isAccountUrl;\n        },\n        async () => {\n            const userMenuSelectors = [\n                '[data-test=\"user-menu\"]',\n                '[data-test=\"logout\"]',\n                '.user-menu',\n                'a[href*=\"logout\"]',\n                'button[data-test*=\"logout\"]'\n            ];\n            for (const selector of userMenuSelectors) {\n                try {\n                    const element = await driver.findElement(By.css(selector));\n                    if (await element.isDisplayed()) {\n                        console.log(`‚úÖ T√¨m th·∫•y ph·∫ßn t·ª≠ ng∆∞·ªùi d√πng: ${selector}`);\n                        return true;\n                    }\n                } catch (e) {\n                    console.log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y selector ${selector}`);\n                }\n            }\n            return false;\n        },\n    ];\n    \n    // Test success indicators\n    for (const indicator of successIndicators) {\n        try {\n            const isSuccess = typeof indicator === 'function' ? await indicator() : indicator;\n            if (isSuccess) {\n                actualResult = 'Success';\n                break;\n            }\n        } catch (error) {\n            // Continue to next indicator\n        }\n    }\n    \n    \n    // Log results\n    if (actualResult === 'Success') {\n        successfulLogins.push(loginCase);\n        console.log(`‚úÖ ${loginCase.testCaseID}: Login SUCCESS`);\n        console.log(`   Current URL: ${currentUrl}`);\n    } else {\n        failedLogins.push(loginCase.testCaseID);\n        console.log(`‚ö† ${loginCase.testCaseID}: Login FAILED`);\n        console.log(`   Current URL: ${currentUrl}`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result\n    expect(actualResult, `${loginCase.testCaseID} expected ${loginCase.expectedResult}`).to.equal(loginCase.expectedResult);\n    \n} catch (error) {\n    failedLogins.push(loginCase.testCaseID);\n    console.log(`‚ö† ${loginCase.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, loginCase.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "83ef4539-3f4a-4f15-b6e9-e19841f66abd",
              "parentUUID": "0bae6370-9359-4a7a-8ccd-daef96a7548b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üîê Login Sign In-TC03: a@b.c",
              "fullTitle": "üîê Login Test Suite üîê Login Sign In-TC03: a@b.c",
              "timedOut": false,
              "duration": 13339,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting login test ${index + 1}/${testLogins.length}: ${loginCase.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(3000);\n    \n    // Navigate to login page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    \n    // Wait for login form to load completely\n    await driver.wait(until.elementLocated(By.id('email')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill login form\n    console.log('üìã Filling login form...');\n    console.log(`üìß Email: ${loginCase.email}`);\n    console.log(`üîë Password: ${loginCase.password.replace(/./g, '*')}`);\n    \n    // Fill email field\n    await waitAndFillElement(driver, By.id('email'), loginCase.email);\n    \n    // Fill password field - Use specific selector for app-password-input\n    console.log('üîë Filling password field...');\n    const passwordElement = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordElement);\n    await driver.sleep(60);\n    await passwordElement.clear();\n    await passwordElement.sendKeys(loginCase.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Find and click submit button - Use specific selector from HTML\n    const submitSelectors = [\n        '[data-test=\"login-submit\"]',  // From your HTML: data-test=\"login-submit\"\n        'input[type=\"submit\"]',        // From your HTML: input type=\"submit\"\n        'input[value=\"Login\"]',        // From your HTML: value=\"Login\"\n        '.btnSubmit'                   // From your HTML: class=\"btnSubmit\"\n    ];\n    \n    let submitButton = null;\n    for (const selector of submitSelectors) {\n        try {\n            submitButton = await findElementWithRetry(driver, By.css(selector));\n            console.log(`‚úÖ Found submit button with selector: ${selector}`);\n            break;\n        } catch (error) {\n            console.log(`‚ö†Ô∏è Submit selector ${selector} not found, trying next...`);\n        }\n    }\n    \n    if (!submitButton) {\n        throw new Error('Could not find submit button');\n    }\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // For input[type=\"submit\"], use click() method\n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response\n    await driver.sleep(1000);\n    \n    // Check for error messages\n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result by URL or presence of dashboard elements\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = 'Fail'; // Default to fail\n    \n    // Check various success indicators\n    const successIndicators = [\n        () => {\n            const expectedUrl = 'http://localhost:4200/#/account';\n            const isAccountUrl = currentUrl === expectedUrl || currentUrl === expectedUrl + '/';\n            if (isAccountUrl) console.log(`‚úÖ URL kh·ªõp v·ªõi trang t√†i kho·∫£n: ${currentUrl}`);\n            return isAccountUrl;\n        },\n        async () => {\n            const userMenuSelectors = [\n                '[data-test=\"user-menu\"]',\n                '[data-test=\"logout\"]',\n                '.user-menu',\n                'a[href*=\"logout\"]',\n                'button[data-test*=\"logout\"]'\n            ];\n            for (const selector of userMenuSelectors) {\n                try {\n                    const element = await driver.findElement(By.css(selector));\n                    if (await element.isDisplayed()) {\n                        console.log(`‚úÖ T√¨m th·∫•y ph·∫ßn t·ª≠ ng∆∞·ªùi d√πng: ${selector}`);\n                        return true;\n                    }\n                } catch (e) {\n                    console.log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y selector ${selector}`);\n                }\n            }\n            return false;\n        },\n    ];\n    \n    // Test success indicators\n    for (const indicator of successIndicators) {\n        try {\n            const isSuccess = typeof indicator === 'function' ? await indicator() : indicator;\n            if (isSuccess) {\n                actualResult = 'Success';\n                break;\n            }\n        } catch (error) {\n            // Continue to next indicator\n        }\n    }\n    \n    \n    // Log results\n    if (actualResult === 'Success') {\n        successfulLogins.push(loginCase);\n        console.log(`‚úÖ ${loginCase.testCaseID}: Login SUCCESS`);\n        console.log(`   Current URL: ${currentUrl}`);\n    } else {\n        failedLogins.push(loginCase.testCaseID);\n        console.log(`‚ö† ${loginCase.testCaseID}: Login FAILED`);\n        console.log(`   Current URL: ${currentUrl}`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result\n    expect(actualResult, `${loginCase.testCaseID} expected ${loginCase.expectedResult}`).to.equal(loginCase.expectedResult);\n    \n} catch (error) {\n    failedLogins.push(loginCase.testCaseID);\n    console.log(`‚ö† ${loginCase.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, loginCase.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "f208c981-01fe-441d-b56f-791ceddca7ef",
              "parentUUID": "0bae6370-9359-4a7a-8ccd-daef96a7548b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üîê Login Sign In-TC04: a@a.vn",
              "fullTitle": "üîê Login Test Suite üîê Login Sign In-TC04: a@a.vn",
              "timedOut": false,
              "duration": 23020,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting login test ${index + 1}/${testLogins.length}: ${loginCase.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(3000);\n    \n    // Navigate to login page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    \n    // Wait for login form to load completely\n    await driver.wait(until.elementLocated(By.id('email')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill login form\n    console.log('üìã Filling login form...');\n    console.log(`üìß Email: ${loginCase.email}`);\n    console.log(`üîë Password: ${loginCase.password.replace(/./g, '*')}`);\n    \n    // Fill email field\n    await waitAndFillElement(driver, By.id('email'), loginCase.email);\n    \n    // Fill password field - Use specific selector for app-password-input\n    console.log('üîë Filling password field...');\n    const passwordElement = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordElement);\n    await driver.sleep(60);\n    await passwordElement.clear();\n    await passwordElement.sendKeys(loginCase.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Find and click submit button - Use specific selector from HTML\n    const submitSelectors = [\n        '[data-test=\"login-submit\"]',  // From your HTML: data-test=\"login-submit\"\n        'input[type=\"submit\"]',        // From your HTML: input type=\"submit\"\n        'input[value=\"Login\"]',        // From your HTML: value=\"Login\"\n        '.btnSubmit'                   // From your HTML: class=\"btnSubmit\"\n    ];\n    \n    let submitButton = null;\n    for (const selector of submitSelectors) {\n        try {\n            submitButton = await findElementWithRetry(driver, By.css(selector));\n            console.log(`‚úÖ Found submit button with selector: ${selector}`);\n            break;\n        } catch (error) {\n            console.log(`‚ö†Ô∏è Submit selector ${selector} not found, trying next...`);\n        }\n    }\n    \n    if (!submitButton) {\n        throw new Error('Could not find submit button');\n    }\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // For input[type=\"submit\"], use click() method\n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response\n    await driver.sleep(1000);\n    \n    // Check for error messages\n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result by URL or presence of dashboard elements\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = 'Fail'; // Default to fail\n    \n    // Check various success indicators\n    const successIndicators = [\n        () => {\n            const expectedUrl = 'http://localhost:4200/#/account';\n            const isAccountUrl = currentUrl === expectedUrl || currentUrl === expectedUrl + '/';\n            if (isAccountUrl) console.log(`‚úÖ URL kh·ªõp v·ªõi trang t√†i kho·∫£n: ${currentUrl}`);\n            return isAccountUrl;\n        },\n        async () => {\n            const userMenuSelectors = [\n                '[data-test=\"user-menu\"]',\n                '[data-test=\"logout\"]',\n                '.user-menu',\n                'a[href*=\"logout\"]',\n                'button[data-test*=\"logout\"]'\n            ];\n            for (const selector of userMenuSelectors) {\n                try {\n                    const element = await driver.findElement(By.css(selector));\n                    if (await element.isDisplayed()) {\n                        console.log(`‚úÖ T√¨m th·∫•y ph·∫ßn t·ª≠ ng∆∞·ªùi d√πng: ${selector}`);\n                        return true;\n                    }\n                } catch (e) {\n                    console.log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y selector ${selector}`);\n                }\n            }\n            return false;\n        },\n    ];\n    \n    // Test success indicators\n    for (const indicator of successIndicators) {\n        try {\n            const isSuccess = typeof indicator === 'function' ? await indicator() : indicator;\n            if (isSuccess) {\n                actualResult = 'Success';\n                break;\n            }\n        } catch (error) {\n            // Continue to next indicator\n        }\n    }\n    \n    \n    // Log results\n    if (actualResult === 'Success') {\n        successfulLogins.push(loginCase);\n        console.log(`‚úÖ ${loginCase.testCaseID}: Login SUCCESS`);\n        console.log(`   Current URL: ${currentUrl}`);\n    } else {\n        failedLogins.push(loginCase.testCaseID);\n        console.log(`‚ö† ${loginCase.testCaseID}: Login FAILED`);\n        console.log(`   Current URL: ${currentUrl}`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result\n    expect(actualResult, `${loginCase.testCaseID} expected ${loginCase.expectedResult}`).to.equal(loginCase.expectedResult);\n    \n} catch (error) {\n    failedLogins.push(loginCase.testCaseID);\n    console.log(`‚ö† ${loginCase.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, loginCase.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "6f3fd9f5-946c-43fd-9981-20cbf055af34",
              "parentUUID": "0bae6370-9359-4a7a-8ccd-daef96a7548b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üîê Login Sign In-TC05: ab@c.vn",
              "fullTitle": "üîê Login Test Suite üîê Login Sign In-TC05: ab@c.vn",
              "timedOut": false,
              "duration": 22970,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting login test ${index + 1}/${testLogins.length}: ${loginCase.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(3000);\n    \n    // Navigate to login page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    \n    // Wait for login form to load completely\n    await driver.wait(until.elementLocated(By.id('email')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill login form\n    console.log('üìã Filling login form...');\n    console.log(`üìß Email: ${loginCase.email}`);\n    console.log(`üîë Password: ${loginCase.password.replace(/./g, '*')}`);\n    \n    // Fill email field\n    await waitAndFillElement(driver, By.id('email'), loginCase.email);\n    \n    // Fill password field - Use specific selector for app-password-input\n    console.log('üîë Filling password field...');\n    const passwordElement = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordElement);\n    await driver.sleep(60);\n    await passwordElement.clear();\n    await passwordElement.sendKeys(loginCase.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Find and click submit button - Use specific selector from HTML\n    const submitSelectors = [\n        '[data-test=\"login-submit\"]',  // From your HTML: data-test=\"login-submit\"\n        'input[type=\"submit\"]',        // From your HTML: input type=\"submit\"\n        'input[value=\"Login\"]',        // From your HTML: value=\"Login\"\n        '.btnSubmit'                   // From your HTML: class=\"btnSubmit\"\n    ];\n    \n    let submitButton = null;\n    for (const selector of submitSelectors) {\n        try {\n            submitButton = await findElementWithRetry(driver, By.css(selector));\n            console.log(`‚úÖ Found submit button with selector: ${selector}`);\n            break;\n        } catch (error) {\n            console.log(`‚ö†Ô∏è Submit selector ${selector} not found, trying next...`);\n        }\n    }\n    \n    if (!submitButton) {\n        throw new Error('Could not find submit button');\n    }\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // For input[type=\"submit\"], use click() method\n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response\n    await driver.sleep(1000);\n    \n    // Check for error messages\n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result by URL or presence of dashboard elements\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = 'Fail'; // Default to fail\n    \n    // Check various success indicators\n    const successIndicators = [\n        () => {\n            const expectedUrl = 'http://localhost:4200/#/account';\n            const isAccountUrl = currentUrl === expectedUrl || currentUrl === expectedUrl + '/';\n            if (isAccountUrl) console.log(`‚úÖ URL kh·ªõp v·ªõi trang t√†i kho·∫£n: ${currentUrl}`);\n            return isAccountUrl;\n        },\n        async () => {\n            const userMenuSelectors = [\n                '[data-test=\"user-menu\"]',\n                '[data-test=\"logout\"]',\n                '.user-menu',\n                'a[href*=\"logout\"]',\n                'button[data-test*=\"logout\"]'\n            ];\n            for (const selector of userMenuSelectors) {\n                try {\n                    const element = await driver.findElement(By.css(selector));\n                    if (await element.isDisplayed()) {\n                        console.log(`‚úÖ T√¨m th·∫•y ph·∫ßn t·ª≠ ng∆∞·ªùi d√πng: ${selector}`);\n                        return true;\n                    }\n                } catch (e) {\n                    console.log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y selector ${selector}`);\n                }\n            }\n            return false;\n        },\n    ];\n    \n    // Test success indicators\n    for (const indicator of successIndicators) {\n        try {\n            const isSuccess = typeof indicator === 'function' ? await indicator() : indicator;\n            if (isSuccess) {\n                actualResult = 'Success';\n                break;\n            }\n        } catch (error) {\n            // Continue to next indicator\n        }\n    }\n    \n    \n    // Log results\n    if (actualResult === 'Success') {\n        successfulLogins.push(loginCase);\n        console.log(`‚úÖ ${loginCase.testCaseID}: Login SUCCESS`);\n        console.log(`   Current URL: ${currentUrl}`);\n    } else {\n        failedLogins.push(loginCase.testCaseID);\n        console.log(`‚ö† ${loginCase.testCaseID}: Login FAILED`);\n        console.log(`   Current URL: ${currentUrl}`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result\n    expect(actualResult, `${loginCase.testCaseID} expected ${loginCase.expectedResult}`).to.equal(loginCase.expectedResult);\n    \n} catch (error) {\n    failedLogins.push(loginCase.testCaseID);\n    console.log(`‚ö† ${loginCase.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, loginCase.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "6ccbb8cf-8bdd-4b46-aec3-7ce9232374be",
              "parentUUID": "0bae6370-9359-4a7a-8ccd-daef96a7548b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üîê Login Sign In-TC06: abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuv@domain.com",
              "fullTitle": "üîê Login Test Suite üîê Login Sign In-TC06: abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuv@domain.com",
              "timedOut": false,
              "duration": 23442,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting login test ${index + 1}/${testLogins.length}: ${loginCase.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(3000);\n    \n    // Navigate to login page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    \n    // Wait for login form to load completely\n    await driver.wait(until.elementLocated(By.id('email')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill login form\n    console.log('üìã Filling login form...');\n    console.log(`üìß Email: ${loginCase.email}`);\n    console.log(`üîë Password: ${loginCase.password.replace(/./g, '*')}`);\n    \n    // Fill email field\n    await waitAndFillElement(driver, By.id('email'), loginCase.email);\n    \n    // Fill password field - Use specific selector for app-password-input\n    console.log('üîë Filling password field...');\n    const passwordElement = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordElement);\n    await driver.sleep(60);\n    await passwordElement.clear();\n    await passwordElement.sendKeys(loginCase.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Find and click submit button - Use specific selector from HTML\n    const submitSelectors = [\n        '[data-test=\"login-submit\"]',  // From your HTML: data-test=\"login-submit\"\n        'input[type=\"submit\"]',        // From your HTML: input type=\"submit\"\n        'input[value=\"Login\"]',        // From your HTML: value=\"Login\"\n        '.btnSubmit'                   // From your HTML: class=\"btnSubmit\"\n    ];\n    \n    let submitButton = null;\n    for (const selector of submitSelectors) {\n        try {\n            submitButton = await findElementWithRetry(driver, By.css(selector));\n            console.log(`‚úÖ Found submit button with selector: ${selector}`);\n            break;\n        } catch (error) {\n            console.log(`‚ö†Ô∏è Submit selector ${selector} not found, trying next...`);\n        }\n    }\n    \n    if (!submitButton) {\n        throw new Error('Could not find submit button');\n    }\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // For input[type=\"submit\"], use click() method\n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response\n    await driver.sleep(1000);\n    \n    // Check for error messages\n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result by URL or presence of dashboard elements\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = 'Fail'; // Default to fail\n    \n    // Check various success indicators\n    const successIndicators = [\n        () => {\n            const expectedUrl = 'http://localhost:4200/#/account';\n            const isAccountUrl = currentUrl === expectedUrl || currentUrl === expectedUrl + '/';\n            if (isAccountUrl) console.log(`‚úÖ URL kh·ªõp v·ªõi trang t√†i kho·∫£n: ${currentUrl}`);\n            return isAccountUrl;\n        },\n        async () => {\n            const userMenuSelectors = [\n                '[data-test=\"user-menu\"]',\n                '[data-test=\"logout\"]',\n                '.user-menu',\n                'a[href*=\"logout\"]',\n                'button[data-test*=\"logout\"]'\n            ];\n            for (const selector of userMenuSelectors) {\n                try {\n                    const element = await driver.findElement(By.css(selector));\n                    if (await element.isDisplayed()) {\n                        console.log(`‚úÖ T√¨m th·∫•y ph·∫ßn t·ª≠ ng∆∞·ªùi d√πng: ${selector}`);\n                        return true;\n                    }\n                } catch (e) {\n                    console.log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y selector ${selector}`);\n                }\n            }\n            return false;\n        },\n    ];\n    \n    // Test success indicators\n    for (const indicator of successIndicators) {\n        try {\n            const isSuccess = typeof indicator === 'function' ? await indicator() : indicator;\n            if (isSuccess) {\n                actualResult = 'Success';\n                break;\n            }\n        } catch (error) {\n            // Continue to next indicator\n        }\n    }\n    \n    \n    // Log results\n    if (actualResult === 'Success') {\n        successfulLogins.push(loginCase);\n        console.log(`‚úÖ ${loginCase.testCaseID}: Login SUCCESS`);\n        console.log(`   Current URL: ${currentUrl}`);\n    } else {\n        failedLogins.push(loginCase.testCaseID);\n        console.log(`‚ö† ${loginCase.testCaseID}: Login FAILED`);\n        console.log(`   Current URL: ${currentUrl}`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result\n    expect(actualResult, `${loginCase.testCaseID} expected ${loginCase.expectedResult}`).to.equal(loginCase.expectedResult);\n    \n} catch (error) {\n    failedLogins.push(loginCase.testCaseID);\n    console.log(`‚ö† ${loginCase.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, loginCase.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "a2038440-d798-476c-9e83-14d914e31798",
              "parentUUID": "0bae6370-9359-4a7a-8ccd-daef96a7548b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üîê Login Sign In-TC07: abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuv2@domain.com",
              "fullTitle": "üîê Login Test Suite üîê Login Sign In-TC07: abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuv2@domain.com",
              "timedOut": false,
              "duration": 23244,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting login test ${index + 1}/${testLogins.length}: ${loginCase.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(3000);\n    \n    // Navigate to login page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    \n    // Wait for login form to load completely\n    await driver.wait(until.elementLocated(By.id('email')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill login form\n    console.log('üìã Filling login form...');\n    console.log(`üìß Email: ${loginCase.email}`);\n    console.log(`üîë Password: ${loginCase.password.replace(/./g, '*')}`);\n    \n    // Fill email field\n    await waitAndFillElement(driver, By.id('email'), loginCase.email);\n    \n    // Fill password field - Use specific selector for app-password-input\n    console.log('üîë Filling password field...');\n    const passwordElement = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordElement);\n    await driver.sleep(60);\n    await passwordElement.clear();\n    await passwordElement.sendKeys(loginCase.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Find and click submit button - Use specific selector from HTML\n    const submitSelectors = [\n        '[data-test=\"login-submit\"]',  // From your HTML: data-test=\"login-submit\"\n        'input[type=\"submit\"]',        // From your HTML: input type=\"submit\"\n        'input[value=\"Login\"]',        // From your HTML: value=\"Login\"\n        '.btnSubmit'                   // From your HTML: class=\"btnSubmit\"\n    ];\n    \n    let submitButton = null;\n    for (const selector of submitSelectors) {\n        try {\n            submitButton = await findElementWithRetry(driver, By.css(selector));\n            console.log(`‚úÖ Found submit button with selector: ${selector}`);\n            break;\n        } catch (error) {\n            console.log(`‚ö†Ô∏è Submit selector ${selector} not found, trying next...`);\n        }\n    }\n    \n    if (!submitButton) {\n        throw new Error('Could not find submit button');\n    }\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // For input[type=\"submit\"], use click() method\n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response\n    await driver.sleep(1000);\n    \n    // Check for error messages\n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result by URL or presence of dashboard elements\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = 'Fail'; // Default to fail\n    \n    // Check various success indicators\n    const successIndicators = [\n        () => {\n            const expectedUrl = 'http://localhost:4200/#/account';\n            const isAccountUrl = currentUrl === expectedUrl || currentUrl === expectedUrl + '/';\n            if (isAccountUrl) console.log(`‚úÖ URL kh·ªõp v·ªõi trang t√†i kho·∫£n: ${currentUrl}`);\n            return isAccountUrl;\n        },\n        async () => {\n            const userMenuSelectors = [\n                '[data-test=\"user-menu\"]',\n                '[data-test=\"logout\"]',\n                '.user-menu',\n                'a[href*=\"logout\"]',\n                'button[data-test*=\"logout\"]'\n            ];\n            for (const selector of userMenuSelectors) {\n                try {\n                    const element = await driver.findElement(By.css(selector));\n                    if (await element.isDisplayed()) {\n                        console.log(`‚úÖ T√¨m th·∫•y ph·∫ßn t·ª≠ ng∆∞·ªùi d√πng: ${selector}`);\n                        return true;\n                    }\n                } catch (e) {\n                    console.log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y selector ${selector}`);\n                }\n            }\n            return false;\n        },\n    ];\n    \n    // Test success indicators\n    for (const indicator of successIndicators) {\n        try {\n            const isSuccess = typeof indicator === 'function' ? await indicator() : indicator;\n            if (isSuccess) {\n                actualResult = 'Success';\n                break;\n            }\n        } catch (error) {\n            // Continue to next indicator\n        }\n    }\n    \n    \n    // Log results\n    if (actualResult === 'Success') {\n        successfulLogins.push(loginCase);\n        console.log(`‚úÖ ${loginCase.testCaseID}: Login SUCCESS`);\n        console.log(`   Current URL: ${currentUrl}`);\n    } else {\n        failedLogins.push(loginCase.testCaseID);\n        console.log(`‚ö† ${loginCase.testCaseID}: Login FAILED`);\n        console.log(`   Current URL: ${currentUrl}`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result\n    expect(actualResult, `${loginCase.testCaseID} expected ${loginCase.expectedResult}`).to.equal(loginCase.expectedResult);\n    \n} catch (error) {\n    failedLogins.push(loginCase.testCaseID);\n    console.log(`‚ö† ${loginCase.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, loginCase.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "991026e9-a037-4fe2-a526-26acab4db6d4",
              "parentUUID": "0bae6370-9359-4a7a-8ccd-daef96a7548b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üîê Login Sign In-TC08: abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwy@domain.com",
              "fullTitle": "üîê Login Test Suite üîê Login Sign In-TC08: abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwy@domain.com",
              "timedOut": false,
              "duration": 12906,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting login test ${index + 1}/${testLogins.length}: ${loginCase.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(3000);\n    \n    // Navigate to login page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    \n    // Wait for login form to load completely\n    await driver.wait(until.elementLocated(By.id('email')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill login form\n    console.log('üìã Filling login form...');\n    console.log(`üìß Email: ${loginCase.email}`);\n    console.log(`üîë Password: ${loginCase.password.replace(/./g, '*')}`);\n    \n    // Fill email field\n    await waitAndFillElement(driver, By.id('email'), loginCase.email);\n    \n    // Fill password field - Use specific selector for app-password-input\n    console.log('üîë Filling password field...');\n    const passwordElement = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordElement);\n    await driver.sleep(60);\n    await passwordElement.clear();\n    await passwordElement.sendKeys(loginCase.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Find and click submit button - Use specific selector from HTML\n    const submitSelectors = [\n        '[data-test=\"login-submit\"]',  // From your HTML: data-test=\"login-submit\"\n        'input[type=\"submit\"]',        // From your HTML: input type=\"submit\"\n        'input[value=\"Login\"]',        // From your HTML: value=\"Login\"\n        '.btnSubmit'                   // From your HTML: class=\"btnSubmit\"\n    ];\n    \n    let submitButton = null;\n    for (const selector of submitSelectors) {\n        try {\n            submitButton = await findElementWithRetry(driver, By.css(selector));\n            console.log(`‚úÖ Found submit button with selector: ${selector}`);\n            break;\n        } catch (error) {\n            console.log(`‚ö†Ô∏è Submit selector ${selector} not found, trying next...`);\n        }\n    }\n    \n    if (!submitButton) {\n        throw new Error('Could not find submit button');\n    }\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // For input[type=\"submit\"], use click() method\n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response\n    await driver.sleep(1000);\n    \n    // Check for error messages\n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result by URL or presence of dashboard elements\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = 'Fail'; // Default to fail\n    \n    // Check various success indicators\n    const successIndicators = [\n        () => {\n            const expectedUrl = 'http://localhost:4200/#/account';\n            const isAccountUrl = currentUrl === expectedUrl || currentUrl === expectedUrl + '/';\n            if (isAccountUrl) console.log(`‚úÖ URL kh·ªõp v·ªõi trang t√†i kho·∫£n: ${currentUrl}`);\n            return isAccountUrl;\n        },\n        async () => {\n            const userMenuSelectors = [\n                '[data-test=\"user-menu\"]',\n                '[data-test=\"logout\"]',\n                '.user-menu',\n                'a[href*=\"logout\"]',\n                'button[data-test*=\"logout\"]'\n            ];\n            for (const selector of userMenuSelectors) {\n                try {\n                    const element = await driver.findElement(By.css(selector));\n                    if (await element.isDisplayed()) {\n                        console.log(`‚úÖ T√¨m th·∫•y ph·∫ßn t·ª≠ ng∆∞·ªùi d√πng: ${selector}`);\n                        return true;\n                    }\n                } catch (e) {\n                    console.log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y selector ${selector}`);\n                }\n            }\n            return false;\n        },\n    ];\n    \n    // Test success indicators\n    for (const indicator of successIndicators) {\n        try {\n            const isSuccess = typeof indicator === 'function' ? await indicator() : indicator;\n            if (isSuccess) {\n                actualResult = 'Success';\n                break;\n            }\n        } catch (error) {\n            // Continue to next indicator\n        }\n    }\n    \n    \n    // Log results\n    if (actualResult === 'Success') {\n        successfulLogins.push(loginCase);\n        console.log(`‚úÖ ${loginCase.testCaseID}: Login SUCCESS`);\n        console.log(`   Current URL: ${currentUrl}`);\n    } else {\n        failedLogins.push(loginCase.testCaseID);\n        console.log(`‚ö† ${loginCase.testCaseID}: Login FAILED`);\n        console.log(`   Current URL: ${currentUrl}`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result\n    expect(actualResult, `${loginCase.testCaseID} expected ${loginCase.expectedResult}`).to.equal(loginCase.expectedResult);\n    \n} catch (error) {\n    failedLogins.push(loginCase.testCaseID);\n    console.log(`‚ö† ${loginCase.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, loginCase.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "aaac7dce-76d5-4b58-8953-0950ba06b50c",
              "parentUUID": "0bae6370-9359-4a7a-8ccd-daef96a7548b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üîê Login Sign In-TC09: tc09@a.vn",
              "fullTitle": "üîê Login Test Suite üîê Login Sign In-TC09: tc09@a.vn",
              "timedOut": false,
              "duration": 23102,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting login test ${index + 1}/${testLogins.length}: ${loginCase.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(3000);\n    \n    // Navigate to login page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    \n    // Wait for login form to load completely\n    await driver.wait(until.elementLocated(By.id('email')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill login form\n    console.log('üìã Filling login form...');\n    console.log(`üìß Email: ${loginCase.email}`);\n    console.log(`üîë Password: ${loginCase.password.replace(/./g, '*')}`);\n    \n    // Fill email field\n    await waitAndFillElement(driver, By.id('email'), loginCase.email);\n    \n    // Fill password field - Use specific selector for app-password-input\n    console.log('üîë Filling password field...');\n    const passwordElement = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordElement);\n    await driver.sleep(60);\n    await passwordElement.clear();\n    await passwordElement.sendKeys(loginCase.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Find and click submit button - Use specific selector from HTML\n    const submitSelectors = [\n        '[data-test=\"login-submit\"]',  // From your HTML: data-test=\"login-submit\"\n        'input[type=\"submit\"]',        // From your HTML: input type=\"submit\"\n        'input[value=\"Login\"]',        // From your HTML: value=\"Login\"\n        '.btnSubmit'                   // From your HTML: class=\"btnSubmit\"\n    ];\n    \n    let submitButton = null;\n    for (const selector of submitSelectors) {\n        try {\n            submitButton = await findElementWithRetry(driver, By.css(selector));\n            console.log(`‚úÖ Found submit button with selector: ${selector}`);\n            break;\n        } catch (error) {\n            console.log(`‚ö†Ô∏è Submit selector ${selector} not found, trying next...`);\n        }\n    }\n    \n    if (!submitButton) {\n        throw new Error('Could not find submit button');\n    }\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // For input[type=\"submit\"], use click() method\n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response\n    await driver.sleep(1000);\n    \n    // Check for error messages\n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result by URL or presence of dashboard elements\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = 'Fail'; // Default to fail\n    \n    // Check various success indicators\n    const successIndicators = [\n        () => {\n            const expectedUrl = 'http://localhost:4200/#/account';\n            const isAccountUrl = currentUrl === expectedUrl || currentUrl === expectedUrl + '/';\n            if (isAccountUrl) console.log(`‚úÖ URL kh·ªõp v·ªõi trang t√†i kho·∫£n: ${currentUrl}`);\n            return isAccountUrl;\n        },\n        async () => {\n            const userMenuSelectors = [\n                '[data-test=\"user-menu\"]',\n                '[data-test=\"logout\"]',\n                '.user-menu',\n                'a[href*=\"logout\"]',\n                'button[data-test*=\"logout\"]'\n            ];\n            for (const selector of userMenuSelectors) {\n                try {\n                    const element = await driver.findElement(By.css(selector));\n                    if (await element.isDisplayed()) {\n                        console.log(`‚úÖ T√¨m th·∫•y ph·∫ßn t·ª≠ ng∆∞·ªùi d√πng: ${selector}`);\n                        return true;\n                    }\n                } catch (e) {\n                    console.log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y selector ${selector}`);\n                }\n            }\n            return false;\n        },\n    ];\n    \n    // Test success indicators\n    for (const indicator of successIndicators) {\n        try {\n            const isSuccess = typeof indicator === 'function' ? await indicator() : indicator;\n            if (isSuccess) {\n                actualResult = 'Success';\n                break;\n            }\n        } catch (error) {\n            // Continue to next indicator\n        }\n    }\n    \n    \n    // Log results\n    if (actualResult === 'Success') {\n        successfulLogins.push(loginCase);\n        console.log(`‚úÖ ${loginCase.testCaseID}: Login SUCCESS`);\n        console.log(`   Current URL: ${currentUrl}`);\n    } else {\n        failedLogins.push(loginCase.testCaseID);\n        console.log(`‚ö† ${loginCase.testCaseID}: Login FAILED`);\n        console.log(`   Current URL: ${currentUrl}`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result\n    expect(actualResult, `${loginCase.testCaseID} expected ${loginCase.expectedResult}`).to.equal(loginCase.expectedResult);\n    \n} catch (error) {\n    failedLogins.push(loginCase.testCaseID);\n    console.log(`‚ö† ${loginCase.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, loginCase.testCaseID);\n    \n    throw error;\n}",
              "err": {
                "message": "AssertionError: Sign In-TC09 expected Fail: expected 'Success' to equal 'Fail'",
                "estack": "AssertionError: Sign In-TC09 expected Fail: expected 'Success' to equal 'Fail'\n    at Context.<anonymous> (file:///C:/demo-selenium/tests/mocha-data-driven.test.js:774:105)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- Success\n+ Fail\n"
              },
              "uuid": "bcc835d8-73bf-46e9-a2ea-25f7aa45efa5",
              "parentUUID": "0bae6370-9359-4a7a-8ccd-daef96a7548b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üîê Login Sign In-TC10: tc10@a.vn",
              "fullTitle": "üîê Login Test Suite üîê Login Sign In-TC10: tc10@a.vn",
              "timedOut": false,
              "duration": 22958,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting login test ${index + 1}/${testLogins.length}: ${loginCase.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(3000);\n    \n    // Navigate to login page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    \n    // Wait for login form to load completely\n    await driver.wait(until.elementLocated(By.id('email')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill login form\n    console.log('üìã Filling login form...');\n    console.log(`üìß Email: ${loginCase.email}`);\n    console.log(`üîë Password: ${loginCase.password.replace(/./g, '*')}`);\n    \n    // Fill email field\n    await waitAndFillElement(driver, By.id('email'), loginCase.email);\n    \n    // Fill password field - Use specific selector for app-password-input\n    console.log('üîë Filling password field...');\n    const passwordElement = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordElement);\n    await driver.sleep(60);\n    await passwordElement.clear();\n    await passwordElement.sendKeys(loginCase.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Find and click submit button - Use specific selector from HTML\n    const submitSelectors = [\n        '[data-test=\"login-submit\"]',  // From your HTML: data-test=\"login-submit\"\n        'input[type=\"submit\"]',        // From your HTML: input type=\"submit\"\n        'input[value=\"Login\"]',        // From your HTML: value=\"Login\"\n        '.btnSubmit'                   // From your HTML: class=\"btnSubmit\"\n    ];\n    \n    let submitButton = null;\n    for (const selector of submitSelectors) {\n        try {\n            submitButton = await findElementWithRetry(driver, By.css(selector));\n            console.log(`‚úÖ Found submit button with selector: ${selector}`);\n            break;\n        } catch (error) {\n            console.log(`‚ö†Ô∏è Submit selector ${selector} not found, trying next...`);\n        }\n    }\n    \n    if (!submitButton) {\n        throw new Error('Could not find submit button');\n    }\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // For input[type=\"submit\"], use click() method\n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response\n    await driver.sleep(1000);\n    \n    // Check for error messages\n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result by URL or presence of dashboard elements\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = 'Fail'; // Default to fail\n    \n    // Check various success indicators\n    const successIndicators = [\n        () => {\n            const expectedUrl = 'http://localhost:4200/#/account';\n            const isAccountUrl = currentUrl === expectedUrl || currentUrl === expectedUrl + '/';\n            if (isAccountUrl) console.log(`‚úÖ URL kh·ªõp v·ªõi trang t√†i kho·∫£n: ${currentUrl}`);\n            return isAccountUrl;\n        },\n        async () => {\n            const userMenuSelectors = [\n                '[data-test=\"user-menu\"]',\n                '[data-test=\"logout\"]',\n                '.user-menu',\n                'a[href*=\"logout\"]',\n                'button[data-test*=\"logout\"]'\n            ];\n            for (const selector of userMenuSelectors) {\n                try {\n                    const element = await driver.findElement(By.css(selector));\n                    if (await element.isDisplayed()) {\n                        console.log(`‚úÖ T√¨m th·∫•y ph·∫ßn t·ª≠ ng∆∞·ªùi d√πng: ${selector}`);\n                        return true;\n                    }\n                } catch (e) {\n                    console.log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y selector ${selector}`);\n                }\n            }\n            return false;\n        },\n    ];\n    \n    // Test success indicators\n    for (const indicator of successIndicators) {\n        try {\n            const isSuccess = typeof indicator === 'function' ? await indicator() : indicator;\n            if (isSuccess) {\n                actualResult = 'Success';\n                break;\n            }\n        } catch (error) {\n            // Continue to next indicator\n        }\n    }\n    \n    \n    // Log results\n    if (actualResult === 'Success') {\n        successfulLogins.push(loginCase);\n        console.log(`‚úÖ ${loginCase.testCaseID}: Login SUCCESS`);\n        console.log(`   Current URL: ${currentUrl}`);\n    } else {\n        failedLogins.push(loginCase.testCaseID);\n        console.log(`‚ö† ${loginCase.testCaseID}: Login FAILED`);\n        console.log(`   Current URL: ${currentUrl}`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result\n    expect(actualResult, `${loginCase.testCaseID} expected ${loginCase.expectedResult}`).to.equal(loginCase.expectedResult);\n    \n} catch (error) {\n    failedLogins.push(loginCase.testCaseID);\n    console.log(`‚ö† ${loginCase.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, loginCase.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "b1cef04a-0092-4b89-a918-23bb260a1071",
              "parentUUID": "0bae6370-9359-4a7a-8ccd-daef96a7548b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üîê Login Sign In-TC11: tc11@a.vn",
              "fullTitle": "üîê Login Test Suite üîê Login Sign In-TC11: tc11@a.vn",
              "timedOut": false,
              "duration": 23409,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting login test ${index + 1}/${testLogins.length}: ${loginCase.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(3000);\n    \n    // Navigate to login page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    \n    // Wait for login form to load completely\n    await driver.wait(until.elementLocated(By.id('email')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill login form\n    console.log('üìã Filling login form...');\n    console.log(`üìß Email: ${loginCase.email}`);\n    console.log(`üîë Password: ${loginCase.password.replace(/./g, '*')}`);\n    \n    // Fill email field\n    await waitAndFillElement(driver, By.id('email'), loginCase.email);\n    \n    // Fill password field - Use specific selector for app-password-input\n    console.log('üîë Filling password field...');\n    const passwordElement = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordElement);\n    await driver.sleep(60);\n    await passwordElement.clear();\n    await passwordElement.sendKeys(loginCase.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Find and click submit button - Use specific selector from HTML\n    const submitSelectors = [\n        '[data-test=\"login-submit\"]',  // From your HTML: data-test=\"login-submit\"\n        'input[type=\"submit\"]',        // From your HTML: input type=\"submit\"\n        'input[value=\"Login\"]',        // From your HTML: value=\"Login\"\n        '.btnSubmit'                   // From your HTML: class=\"btnSubmit\"\n    ];\n    \n    let submitButton = null;\n    for (const selector of submitSelectors) {\n        try {\n            submitButton = await findElementWithRetry(driver, By.css(selector));\n            console.log(`‚úÖ Found submit button with selector: ${selector}`);\n            break;\n        } catch (error) {\n            console.log(`‚ö†Ô∏è Submit selector ${selector} not found, trying next...`);\n        }\n    }\n    \n    if (!submitButton) {\n        throw new Error('Could not find submit button');\n    }\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // For input[type=\"submit\"], use click() method\n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response\n    await driver.sleep(1000);\n    \n    // Check for error messages\n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result by URL or presence of dashboard elements\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = 'Fail'; // Default to fail\n    \n    // Check various success indicators\n    const successIndicators = [\n        () => {\n            const expectedUrl = 'http://localhost:4200/#/account';\n            const isAccountUrl = currentUrl === expectedUrl || currentUrl === expectedUrl + '/';\n            if (isAccountUrl) console.log(`‚úÖ URL kh·ªõp v·ªõi trang t√†i kho·∫£n: ${currentUrl}`);\n            return isAccountUrl;\n        },\n        async () => {\n            const userMenuSelectors = [\n                '[data-test=\"user-menu\"]',\n                '[data-test=\"logout\"]',\n                '.user-menu',\n                'a[href*=\"logout\"]',\n                'button[data-test*=\"logout\"]'\n            ];\n            for (const selector of userMenuSelectors) {\n                try {\n                    const element = await driver.findElement(By.css(selector));\n                    if (await element.isDisplayed()) {\n                        console.log(`‚úÖ T√¨m th·∫•y ph·∫ßn t·ª≠ ng∆∞·ªùi d√πng: ${selector}`);\n                        return true;\n                    }\n                } catch (e) {\n                    console.log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y selector ${selector}`);\n                }\n            }\n            return false;\n        },\n    ];\n    \n    // Test success indicators\n    for (const indicator of successIndicators) {\n        try {\n            const isSuccess = typeof indicator === 'function' ? await indicator() : indicator;\n            if (isSuccess) {\n                actualResult = 'Success';\n                break;\n            }\n        } catch (error) {\n            // Continue to next indicator\n        }\n    }\n    \n    \n    // Log results\n    if (actualResult === 'Success') {\n        successfulLogins.push(loginCase);\n        console.log(`‚úÖ ${loginCase.testCaseID}: Login SUCCESS`);\n        console.log(`   Current URL: ${currentUrl}`);\n    } else {\n        failedLogins.push(loginCase.testCaseID);\n        console.log(`‚ö† ${loginCase.testCaseID}: Login FAILED`);\n        console.log(`   Current URL: ${currentUrl}`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result\n    expect(actualResult, `${loginCase.testCaseID} expected ${loginCase.expectedResult}`).to.equal(loginCase.expectedResult);\n    \n} catch (error) {\n    failedLogins.push(loginCase.testCaseID);\n    console.log(`‚ö† ${loginCase.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, loginCase.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "c7694f52-f17b-486b-bdb4-7cd1c268ce14",
              "parentUUID": "0bae6370-9359-4a7a-8ccd-daef96a7548b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üîê Login Sign In-TC12: tc12@a.vn",
              "fullTitle": "üîê Login Test Suite üîê Login Sign In-TC12: tc12@a.vn",
              "timedOut": false,
              "duration": 23032,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting login test ${index + 1}/${testLogins.length}: ${loginCase.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(3000);\n    \n    // Navigate to login page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    \n    // Wait for login form to load completely\n    await driver.wait(until.elementLocated(By.id('email')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill login form\n    console.log('üìã Filling login form...');\n    console.log(`üìß Email: ${loginCase.email}`);\n    console.log(`üîë Password: ${loginCase.password.replace(/./g, '*')}`);\n    \n    // Fill email field\n    await waitAndFillElement(driver, By.id('email'), loginCase.email);\n    \n    // Fill password field - Use specific selector for app-password-input\n    console.log('üîë Filling password field...');\n    const passwordElement = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordElement);\n    await driver.sleep(60);\n    await passwordElement.clear();\n    await passwordElement.sendKeys(loginCase.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Find and click submit button - Use specific selector from HTML\n    const submitSelectors = [\n        '[data-test=\"login-submit\"]',  // From your HTML: data-test=\"login-submit\"\n        'input[type=\"submit\"]',        // From your HTML: input type=\"submit\"\n        'input[value=\"Login\"]',        // From your HTML: value=\"Login\"\n        '.btnSubmit'                   // From your HTML: class=\"btnSubmit\"\n    ];\n    \n    let submitButton = null;\n    for (const selector of submitSelectors) {\n        try {\n            submitButton = await findElementWithRetry(driver, By.css(selector));\n            console.log(`‚úÖ Found submit button with selector: ${selector}`);\n            break;\n        } catch (error) {\n            console.log(`‚ö†Ô∏è Submit selector ${selector} not found, trying next...`);\n        }\n    }\n    \n    if (!submitButton) {\n        throw new Error('Could not find submit button');\n    }\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // For input[type=\"submit\"], use click() method\n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response\n    await driver.sleep(1000);\n    \n    // Check for error messages\n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result by URL or presence of dashboard elements\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = 'Fail'; // Default to fail\n    \n    // Check various success indicators\n    const successIndicators = [\n        () => {\n            const expectedUrl = 'http://localhost:4200/#/account';\n            const isAccountUrl = currentUrl === expectedUrl || currentUrl === expectedUrl + '/';\n            if (isAccountUrl) console.log(`‚úÖ URL kh·ªõp v·ªõi trang t√†i kho·∫£n: ${currentUrl}`);\n            return isAccountUrl;\n        },\n        async () => {\n            const userMenuSelectors = [\n                '[data-test=\"user-menu\"]',\n                '[data-test=\"logout\"]',\n                '.user-menu',\n                'a[href*=\"logout\"]',\n                'button[data-test*=\"logout\"]'\n            ];\n            for (const selector of userMenuSelectors) {\n                try {\n                    const element = await driver.findElement(By.css(selector));\n                    if (await element.isDisplayed()) {\n                        console.log(`‚úÖ T√¨m th·∫•y ph·∫ßn t·ª≠ ng∆∞·ªùi d√πng: ${selector}`);\n                        return true;\n                    }\n                } catch (e) {\n                    console.log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y selector ${selector}`);\n                }\n            }\n            return false;\n        },\n    ];\n    \n    // Test success indicators\n    for (const indicator of successIndicators) {\n        try {\n            const isSuccess = typeof indicator === 'function' ? await indicator() : indicator;\n            if (isSuccess) {\n                actualResult = 'Success';\n                break;\n            }\n        } catch (error) {\n            // Continue to next indicator\n        }\n    }\n    \n    \n    // Log results\n    if (actualResult === 'Success') {\n        successfulLogins.push(loginCase);\n        console.log(`‚úÖ ${loginCase.testCaseID}: Login SUCCESS`);\n        console.log(`   Current URL: ${currentUrl}`);\n    } else {\n        failedLogins.push(loginCase.testCaseID);\n        console.log(`‚ö† ${loginCase.testCaseID}: Login FAILED`);\n        console.log(`   Current URL: ${currentUrl}`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result\n    expect(actualResult, `${loginCase.testCaseID} expected ${loginCase.expectedResult}`).to.equal(loginCase.expectedResult);\n    \n} catch (error) {\n    failedLogins.push(loginCase.testCaseID);\n    console.log(`‚ö† ${loginCase.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, loginCase.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "a77cc4bf-3b54-4b37-a8bd-99189a1b45a3",
              "parentUUID": "0bae6370-9359-4a7a-8ccd-daef96a7548b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üîê Login Sign In-TC13: tc13@a.vn",
              "fullTitle": "üîê Login Test Suite üîê Login Sign In-TC13: tc13@a.vn",
              "timedOut": false,
              "duration": 23104,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting login test ${index + 1}/${testLogins.length}: ${loginCase.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(3000);\n    \n    // Navigate to login page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    \n    // Wait for login form to load completely\n    await driver.wait(until.elementLocated(By.id('email')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill login form\n    console.log('üìã Filling login form...');\n    console.log(`üìß Email: ${loginCase.email}`);\n    console.log(`üîë Password: ${loginCase.password.replace(/./g, '*')}`);\n    \n    // Fill email field\n    await waitAndFillElement(driver, By.id('email'), loginCase.email);\n    \n    // Fill password field - Use specific selector for app-password-input\n    console.log('üîë Filling password field...');\n    const passwordElement = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordElement);\n    await driver.sleep(60);\n    await passwordElement.clear();\n    await passwordElement.sendKeys(loginCase.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Find and click submit button - Use specific selector from HTML\n    const submitSelectors = [\n        '[data-test=\"login-submit\"]',  // From your HTML: data-test=\"login-submit\"\n        'input[type=\"submit\"]',        // From your HTML: input type=\"submit\"\n        'input[value=\"Login\"]',        // From your HTML: value=\"Login\"\n        '.btnSubmit'                   // From your HTML: class=\"btnSubmit\"\n    ];\n    \n    let submitButton = null;\n    for (const selector of submitSelectors) {\n        try {\n            submitButton = await findElementWithRetry(driver, By.css(selector));\n            console.log(`‚úÖ Found submit button with selector: ${selector}`);\n            break;\n        } catch (error) {\n            console.log(`‚ö†Ô∏è Submit selector ${selector} not found, trying next...`);\n        }\n    }\n    \n    if (!submitButton) {\n        throw new Error('Could not find submit button');\n    }\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // For input[type=\"submit\"], use click() method\n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response\n    await driver.sleep(1000);\n    \n    // Check for error messages\n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result by URL or presence of dashboard elements\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = 'Fail'; // Default to fail\n    \n    // Check various success indicators\n    const successIndicators = [\n        () => {\n            const expectedUrl = 'http://localhost:4200/#/account';\n            const isAccountUrl = currentUrl === expectedUrl || currentUrl === expectedUrl + '/';\n            if (isAccountUrl) console.log(`‚úÖ URL kh·ªõp v·ªõi trang t√†i kho·∫£n: ${currentUrl}`);\n            return isAccountUrl;\n        },\n        async () => {\n            const userMenuSelectors = [\n                '[data-test=\"user-menu\"]',\n                '[data-test=\"logout\"]',\n                '.user-menu',\n                'a[href*=\"logout\"]',\n                'button[data-test*=\"logout\"]'\n            ];\n            for (const selector of userMenuSelectors) {\n                try {\n                    const element = await driver.findElement(By.css(selector));\n                    if (await element.isDisplayed()) {\n                        console.log(`‚úÖ T√¨m th·∫•y ph·∫ßn t·ª≠ ng∆∞·ªùi d√πng: ${selector}`);\n                        return true;\n                    }\n                } catch (e) {\n                    console.log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y selector ${selector}`);\n                }\n            }\n            return false;\n        },\n    ];\n    \n    // Test success indicators\n    for (const indicator of successIndicators) {\n        try {\n            const isSuccess = typeof indicator === 'function' ? await indicator() : indicator;\n            if (isSuccess) {\n                actualResult = 'Success';\n                break;\n            }\n        } catch (error) {\n            // Continue to next indicator\n        }\n    }\n    \n    \n    // Log results\n    if (actualResult === 'Success') {\n        successfulLogins.push(loginCase);\n        console.log(`‚úÖ ${loginCase.testCaseID}: Login SUCCESS`);\n        console.log(`   Current URL: ${currentUrl}`);\n    } else {\n        failedLogins.push(loginCase.testCaseID);\n        console.log(`‚ö† ${loginCase.testCaseID}: Login FAILED`);\n        console.log(`   Current URL: ${currentUrl}`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result\n    expect(actualResult, `${loginCase.testCaseID} expected ${loginCase.expectedResult}`).to.equal(loginCase.expectedResult);\n    \n} catch (error) {\n    failedLogins.push(loginCase.testCaseID);\n    console.log(`‚ö† ${loginCase.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, loginCase.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "910598dc-9454-4174-bd2b-7163dc98fbde",
              "parentUUID": "0bae6370-9359-4a7a-8ccd-daef96a7548b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üîê Login Sign In-TC14: user@domain.com",
              "fullTitle": "üîê Login Test Suite üîê Login Sign In-TC14: user@domain.com",
              "timedOut": false,
              "duration": 12964,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting login test ${index + 1}/${testLogins.length}: ${loginCase.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(3000);\n    \n    // Navigate to login page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    \n    // Wait for login form to load completely\n    await driver.wait(until.elementLocated(By.id('email')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill login form\n    console.log('üìã Filling login form...');\n    console.log(`üìß Email: ${loginCase.email}`);\n    console.log(`üîë Password: ${loginCase.password.replace(/./g, '*')}`);\n    \n    // Fill email field\n    await waitAndFillElement(driver, By.id('email'), loginCase.email);\n    \n    // Fill password field - Use specific selector for app-password-input\n    console.log('üîë Filling password field...');\n    const passwordElement = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordElement);\n    await driver.sleep(60);\n    await passwordElement.clear();\n    await passwordElement.sendKeys(loginCase.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Find and click submit button - Use specific selector from HTML\n    const submitSelectors = [\n        '[data-test=\"login-submit\"]',  // From your HTML: data-test=\"login-submit\"\n        'input[type=\"submit\"]',        // From your HTML: input type=\"submit\"\n        'input[value=\"Login\"]',        // From your HTML: value=\"Login\"\n        '.btnSubmit'                   // From your HTML: class=\"btnSubmit\"\n    ];\n    \n    let submitButton = null;\n    for (const selector of submitSelectors) {\n        try {\n            submitButton = await findElementWithRetry(driver, By.css(selector));\n            console.log(`‚úÖ Found submit button with selector: ${selector}`);\n            break;\n        } catch (error) {\n            console.log(`‚ö†Ô∏è Submit selector ${selector} not found, trying next...`);\n        }\n    }\n    \n    if (!submitButton) {\n        throw new Error('Could not find submit button');\n    }\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // For input[type=\"submit\"], use click() method\n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response\n    await driver.sleep(1000);\n    \n    // Check for error messages\n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result by URL or presence of dashboard elements\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = 'Fail'; // Default to fail\n    \n    // Check various success indicators\n    const successIndicators = [\n        () => {\n            const expectedUrl = 'http://localhost:4200/#/account';\n            const isAccountUrl = currentUrl === expectedUrl || currentUrl === expectedUrl + '/';\n            if (isAccountUrl) console.log(`‚úÖ URL kh·ªõp v·ªõi trang t√†i kho·∫£n: ${currentUrl}`);\n            return isAccountUrl;\n        },\n        async () => {\n            const userMenuSelectors = [\n                '[data-test=\"user-menu\"]',\n                '[data-test=\"logout\"]',\n                '.user-menu',\n                'a[href*=\"logout\"]',\n                'button[data-test*=\"logout\"]'\n            ];\n            for (const selector of userMenuSelectors) {\n                try {\n                    const element = await driver.findElement(By.css(selector));\n                    if (await element.isDisplayed()) {\n                        console.log(`‚úÖ T√¨m th·∫•y ph·∫ßn t·ª≠ ng∆∞·ªùi d√πng: ${selector}`);\n                        return true;\n                    }\n                } catch (e) {\n                    console.log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y selector ${selector}`);\n                }\n            }\n            return false;\n        },\n    ];\n    \n    // Test success indicators\n    for (const indicator of successIndicators) {\n        try {\n            const isSuccess = typeof indicator === 'function' ? await indicator() : indicator;\n            if (isSuccess) {\n                actualResult = 'Success';\n                break;\n            }\n        } catch (error) {\n            // Continue to next indicator\n        }\n    }\n    \n    \n    // Log results\n    if (actualResult === 'Success') {\n        successfulLogins.push(loginCase);\n        console.log(`‚úÖ ${loginCase.testCaseID}: Login SUCCESS`);\n        console.log(`   Current URL: ${currentUrl}`);\n    } else {\n        failedLogins.push(loginCase.testCaseID);\n        console.log(`‚ö† ${loginCase.testCaseID}: Login FAILED`);\n        console.log(`   Current URL: ${currentUrl}`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result\n    expect(actualResult, `${loginCase.testCaseID} expected ${loginCase.expectedResult}`).to.equal(loginCase.expectedResult);\n    \n} catch (error) {\n    failedLogins.push(loginCase.testCaseID);\n    console.log(`‚ö† ${loginCase.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, loginCase.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "115969b7-76d3-43eb-a71b-cdaf0baa5551",
              "parentUUID": "0bae6370-9359-4a7a-8ccd-daef96a7548b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8a5b3c94-845b-45ff-a15a-1c989c8d9afb",
            "83ef4539-3f4a-4f15-b6e9-e19841f66abd",
            "f208c981-01fe-441d-b56f-791ceddca7ef",
            "6f3fd9f5-946c-43fd-9981-20cbf055af34",
            "6ccbb8cf-8bdd-4b46-aec3-7ce9232374be",
            "a2038440-d798-476c-9e83-14d914e31798",
            "991026e9-a037-4fe2-a526-26acab4db6d4",
            "aaac7dce-76d5-4b58-8953-0950ba06b50c",
            "b1cef04a-0092-4b89-a918-23bb260a1071",
            "c7694f52-f17b-486b-bdb4-7cd1c268ce14",
            "a77cc4bf-3b54-4b37-a8bd-99189a1b45a3",
            "910598dc-9454-4174-bd2b-7163dc98fbde",
            "115969b7-76d3-43eb-a71b-cdaf0baa5551"
          ],
          "failures": [
            "bcc835d8-73bf-46e9-a2ea-25f7aa45efa5"
          ],
          "pending": [],
          "skipped": [],
          "duration": 284300,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 120000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "test-report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "reports",
        "reportFilename": "test-report"
      },
      "version": "6.2.0"
    }
  }
}