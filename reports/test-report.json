{
  "stats": {
    "suites": 2,
    "tests": 85,
    "passes": 82,
    "pending": 0,
    "failures": 3,
    "start": "2025-08-24T07:00:38.994Z",
    "end": "2025-08-24T07:26:03.459Z",
    "duration": 1524465,
    "testsRegistered": 85,
    "passPercent": 96.47058823529412,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "49fbcd81-7fff-4bc6-a2be-aef04961794c",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "08195fca-1c51-4151-8efb-04dc48966bc3",
          "title": "üìù Registration Test Suite",
          "fullFile": "C:\\demo-selenium\\tests\\mocha-data-driven.test.js",
          "file": "\\tests\\mocha-data-driven.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"üìù Registration Test Suite\"",
              "fullTitle": "üìù Registration Test Suite \"before all\" hook in \"üìù Registration Test Suite\"",
              "timedOut": false,
              "duration": 1457,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.setup);\nconsole.log(`\\nüöÄ Starting registration test with ${testUsers.length} users`);\n\ndriver = await createDriver(testConfig.browser, testConfig.headless);\nconsole.log('‚úÖ WebDriver initialized successfully for Registration');",
              "err": {},
              "uuid": "543498ec-2d1e-4405-ab16-ce9ddad2a5ce",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"üìù Registration Test Suite\"",
              "fullTitle": "üìù Registration Test Suite \"after all\" hook in \"üìù Registration Test Suite\"",
              "timedOut": false,
              "duration": 43,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.setup);\nif (driver) {\n    await driver.quit();\n    console.log('‚úÖ Registration WebDriver closed successfully');\n}\n\nconsole.log(`\\nüìä Registration Results Summary:`);\nconsole.log(`‚úÖ Successful: ${successfulRegistrations.length}/${testUsers.length}`);\nconsole.log(`‚ö† Failed: ${failedRegistrations.length}/${testUsers.length}`);\n\nif (failedRegistrations.length > 0) {\n    console.log('\\n‚ö† Failed Registration Test Cases:');\n    failedRegistrations.forEach(tc => console.log(`  - ${tc}`));\n}",
              "err": {},
              "uuid": "117ba621-7eff-46db-bd42-0a733d941632",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "üìù Register Sign Up-TC01: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC01: Nguyen Van",
              "timedOut": false,
              "duration": 23070,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "002bf396-cc22-4434-a8ad-b1c3c6797bd8",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC02: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC02: Nguyen Van",
              "timedOut": false,
              "duration": 6629,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "db7138a0-01c9-447f-9539-86577bd2c310",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC03: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC03: Nguyen Van",
              "timedOut": false,
              "duration": 7230,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "8d428d36-c322-418b-bd4c-954cab8f0472",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC04: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC04: Nguyen Van",
              "timedOut": false,
              "duration": 22667,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "eac47d93-d824-4cd5-9f34-503af9b5d3c5",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC05: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC05: Nguyen Van",
              "timedOut": false,
              "duration": 22780,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "d32625f2-b73d-453c-a106-95839388e88b",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC06: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC06: Nguyen Van",
              "timedOut": false,
              "duration": 22727,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "e31f51b2-ded4-4a7c-9fc1-b46969af6fe9",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC07: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC07: Nguyen Van",
              "timedOut": false,
              "duration": 22651,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "48c86c29-9194-4802-8fc5-c45aa122edb6",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC08: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC08: Nguyen Van",
              "timedOut": false,
              "duration": 6710,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "3b77b8a1-ea4a-4e35-bd72-ae6db3a3b50e",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC09: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC09: Nguyen Van",
              "timedOut": false,
              "duration": 22995,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {
                "message": "AssertionError: Sign Up-TC09 expected Fail: expected 'Success' to equal 'Fail'",
                "estack": "AssertionError: Sign Up-TC09 expected Fail: expected 'Success' to equal 'Fail'\n    at Context.<anonymous> (file:///C:/demo-selenium/tests/mocha-data-driven.test.js:560:99)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- Success\n+ Fail\n"
              },
              "uuid": "e16f1023-70a8-4d7c-a558-f92dbaa81bf6",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC10: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC10: Nguyen Van",
              "timedOut": false,
              "duration": 22923,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "93b8a804-b80b-4cb6-a224-8e40d6901ef1",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC11: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC11: Nguyen Van",
              "timedOut": false,
              "duration": 22744,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "42a04d9c-8a4d-434b-a801-f925ce22900a",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC12: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC12: Nguyen Van",
              "timedOut": false,
              "duration": 22893,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "713cd127-dc45-43de-88ba-faefc0a3278b",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC13: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC13: Nguyen Van",
              "timedOut": false,
              "duration": 22645,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "1e0f8795-7db9-4606-8ba1-1c6a54d38755",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC14: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC14: Nguyen Van",
              "timedOut": false,
              "duration": 7032,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "0e0560b0-5f71-40f2-93db-8b9d130b5f0e",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC15:  Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC15:  Van",
              "timedOut": false,
              "duration": 7069,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "693442cc-6b16-4ccb-a3a4-efb525fe55cb",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC16: Nguy·ªÖn Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC16: Nguy·ªÖn Van",
              "timedOut": false,
              "duration": 6970,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "2c454ede-cd5f-4240-8f26-4eea7b64427c",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC17: Nguyen123 Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC17: Nguyen123 Van",
              "timedOut": false,
              "duration": 6969,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "36b8b260-c5bf-451d-9452-4adff6c21470",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC18: Nguyen@# Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC18: Nguyen@# Van",
              "timedOut": false,
              "duration": 7002,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "086ad9d4-ac0a-4b59-8c5f-6a35dec8edb2",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC19: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC19: Nguyen Van",
              "timedOut": false,
              "duration": 22627,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "08715355-9ccd-4f10-b995-cb0530825c4a",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC20: An Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC20: An Van",
              "timedOut": false,
              "duration": 22668,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "5b8c50d5-e1b3-4686-81e0-775decd5a787",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC21: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC21: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa Van",
              "timedOut": false,
              "duration": 22912,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "18e96003-028e-451a-8fe7-04d5acc08cbb",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC22: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC22: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa Van",
              "timedOut": false,
              "duration": 22857,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "2b581866-3f0c-4c69-8d4b-91b99e6a1b65",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC23: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC23: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa Van",
              "timedOut": false,
              "duration": 7052,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "e983119d-8b5b-436b-acdb-16360f8c5d45",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC24: Nguyen ",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC24: Nguyen ",
              "timedOut": false,
              "duration": 7003,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "df736a80-0c2c-4d69-89ec-dccefbe5115b",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC25: Nguyen VƒÉn",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC25: Nguyen VƒÉn",
              "timedOut": false,
              "duration": 7052,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "7d8339ca-b656-48bc-84a5-1bd89761a755",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC26: Nguyen Van123",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC26: Nguyen Van123",
              "timedOut": false,
              "duration": 7069,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "eb5d28b8-d54c-4e59-9250-e6dd36b71e19",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC27: Nguyen Van@#",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC27: Nguyen Van@#",
              "timedOut": false,
              "duration": 6998,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "7545e20f-453a-4cc5-97a8-d5fbefb72840",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC28: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC28: Nguyen Van",
              "timedOut": false,
              "duration": 22553,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "0753575b-7c35-4018-9a5e-c0983fc733dd",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC29: Nguyen An",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC29: Nguyen An",
              "timedOut": false,
              "duration": 22599,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "b2b354fc-287a-4433-8108-929045f95069",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC30: Nguyen aaaaaaaaaaaaaaaaaaa",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC30: Nguyen aaaaaaaaaaaaaaaaaaa",
              "timedOut": false,
              "duration": 22794,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "ea149093-6ad0-454e-b637-6da19ec98f4a",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC31: Nguyen aaaaaaaaaaaaaaaaaaaa",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC31: Nguyen aaaaaaaaaaaaaaaaaaaa",
              "timedOut": false,
              "duration": 22769,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "f485402b-e30a-4778-bb28-e69841d8cb60",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC32: Nguyen aaaaaaaaaaaaaaaaaaaaa",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC32: Nguyen aaaaaaaaaaaaaaaaaaaaa",
              "timedOut": false,
              "duration": 6975,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "ec3983d1-8647-4961-b88e-5402c073368b",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC33: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC33: Nguyen Van",
              "timedOut": false,
              "duration": 6956,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "ca47169e-c806-4442-8833-18fa24b2d8c5",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC34: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC34: Nguyen Van",
              "timedOut": false,
              "duration": 22778,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "58910e49-a931-49f4-948c-36c58e799d23",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC35: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC35: Nguyen Van",
              "timedOut": false,
              "duration": 22781,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "0645f5fb-8ce8-4b93-9890-43d5d03e8ed3",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC36: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC36: Nguyen Van",
              "timedOut": false,
              "duration": 22530,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "7278fd16-f49e-49eb-b2b8-84ab05ec6a94",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC37: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC37: Nguyen Van",
              "timedOut": false,
              "duration": 22780,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "a50d8b5e-2273-43af-b4fd-77bca4b27f32",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC38: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC38: Nguyen Van",
              "timedOut": false,
              "duration": 22411,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {
                "message": "AssertionError: Sign Up-TC38 expected Fail: expected 'Success' to equal 'Fail'",
                "estack": "AssertionError: Sign Up-TC38 expected Fail: expected 'Success' to equal 'Fail'\n    at Context.<anonymous> (file:///C:/demo-selenium/tests/mocha-data-driven.test.js:560:99)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- Success\n+ Fail\n"
              },
              "uuid": "1f9176f7-1500-4259-a04f-874a24500977",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC39: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC39: Nguyen Van",
              "timedOut": false,
              "duration": 6709,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "b15604f3-1307-4a7f-8da2-73752a5382ba",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC40: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC40: Nguyen Van",
              "timedOut": false,
              "duration": 22332,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "64e22757-29e5-4e58-8e09-66d5c6024c95",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC41: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC41: Nguyen Van",
              "timedOut": false,
              "duration": 22670,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "4539ce5e-39c2-4fb2-8d36-872f4f5c8ae5",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC42: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC42: Nguyen Van",
              "timedOut": false,
              "duration": 22805,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "8d9b328a-f7d1-4d1b-829b-6f72a278891a",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC43: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC43: Nguyen Van",
              "timedOut": false,
              "duration": 23001,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "488ccdb8-99cf-434f-9c4b-8975ef4e1be7",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC44: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC44: Nguyen Van",
              "timedOut": false,
              "duration": 6977,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "62961712-df05-44b5-9ec8-c6bec135f272",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC45: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC45: Nguyen Van",
              "timedOut": false,
              "duration": 6944,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "2bbbf5a7-2576-4faa-a055-20509509b0d2",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC46: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC46: Nguyen Van",
              "timedOut": false,
              "duration": 22741,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "35acecc0-d44a-409f-8174-59836476f9e2",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC47: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC47: Nguyen Van",
              "timedOut": false,
              "duration": 22682,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "ae15ba99-835b-4f18-bfb4-d3a153943606",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC48: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC48: Nguyen Van",
              "timedOut": false,
              "duration": 22664,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "4b1fd9c2-a40d-4408-8762-f47408596b47",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC49: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC49: Nguyen Van",
              "timedOut": false,
              "duration": 22720,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "bac19bec-f775-44e0-baf0-c95d4fac2838",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC50: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC50: Nguyen Van",
              "timedOut": false,
              "duration": 7004,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "d11ff870-631c-4977-92a3-e0cb6e175301",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC51: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC51: Nguyen Van",
              "timedOut": false,
              "duration": 6998,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "1120187a-e2a0-41d4-a4aa-2d0445d6db83",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC52: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC52: Nguyen Van",
              "timedOut": false,
              "duration": 22681,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "f2549873-6396-4075-a801-ae34363804a2",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC53: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC53: Nguyen Van",
              "timedOut": false,
              "duration": 22751,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "184075a2-0389-4ad4-9c7f-6ffd3647bbe6",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC54: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC54: Nguyen Van",
              "timedOut": false,
              "duration": 22534,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "2c5d099e-0232-48ad-8d77-bc2dfb90e5ad",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC55: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC55: Nguyen Van",
              "timedOut": false,
              "duration": 22406,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "0b12deaa-81d2-4aa0-9133-e4fed210531c",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC56: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC56: Nguyen Van",
              "timedOut": false,
              "duration": 6779,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "0a6218e2-3171-41ad-b931-cb1e1b489d19",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC57: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC57: Nguyen Van",
              "timedOut": false,
              "duration": 28343,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "38dd5cfb-79d8-4dcb-84d5-e2688fd9de03",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC58: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC58: Nguyen Van",
              "timedOut": false,
              "duration": 22392,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "56f68f14-b12a-4cf4-aafa-903a66f1b4ee",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC59: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC59: Nguyen Van",
              "timedOut": false,
              "duration": 29336,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "eef5d1be-7c96-4541-ac31-7e3040ac8f63",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC60: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC60: Nguyen Van",
              "timedOut": false,
              "duration": 6722,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "ebe87a3e-0f91-4aaa-8edf-3a1b04e3b682",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC61: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC61: Nguyen Van",
              "timedOut": false,
              "duration": 22901,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "47f4b73b-54d5-46ce-9370-086eb36277b4",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC62: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC62: Nguyen Van",
              "timedOut": false,
              "duration": 21934,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "6177ccb7-1c65-481c-89c0-395d6fbae292",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC63: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC63: Nguyen Van",
              "timedOut": false,
              "duration": 22495,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "7d33c11a-5a4d-4f01-89cd-283ef09987f2",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC64: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC64: Nguyen Van",
              "timedOut": false,
              "duration": 22468,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "ee14b0d3-cbda-4961-9273-1b1fbeb1ff80",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC65: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC65: Nguyen Van",
              "timedOut": false,
              "duration": 6866,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "b0383d6b-603e-4de8-9d18-244db4e990f0",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC66: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC66: Nguyen Van",
              "timedOut": false,
              "duration": 6559,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "b6a16c10-56f2-47d8-96ad-9f003517a3f9",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC67: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC67: Nguyen Van",
              "timedOut": false,
              "duration": 22301,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "106c0c65-453a-4a7f-aa52-4e4ef1a89e31",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC68: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC68: Nguyen Van",
              "timedOut": false,
              "duration": 22257,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "3d2c04ad-8055-4b39-8722-baee96b1609e",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC69: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC69: Nguyen Van",
              "timedOut": false,
              "duration": 22501,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "30be26d1-a4bb-46fd-b725-08546a1b67d7",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC70: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC70: Nguyen Van",
              "timedOut": false,
              "duration": 22470,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "05caf689-b8c9-491c-8d80-e73ee1e0df52",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üìù Register Sign Up-TC71: Nguyen Van",
              "fullTitle": "üìù Registration Test Suite üìù Register Sign Up-TC71: Nguyen Van",
              "timedOut": false,
              "duration": 6698,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting registration test ${index + 1}/${testUsers.length}: ${user.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(400);\n    \n    // Navigate to registration page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    await driver.sleep(100);\n    await waitAndClick(driver, By.css('[data-test=\"register-link\"]'));\n    \n    // Wait for registration form to load completely\n    await driver.wait(until.elementLocated(By.id('first_name')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill form step by step with verification\n    console.log('üìã Filling form fields...');\n    \n    await waitAndFillElement(driver, By.id('first_name'), user.firstName);\n    await waitAndFillElement(driver, By.id('last_name'), user.lastName);\n    \n    // Handle Date of Birth with enhanced approach\n    console.log(`üìÖ Setting DOB: ${user.dob}`);\n    const dobElement = await findElementWithRetry(driver, By.id('dob'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", dobElement);\n    await driver.sleep(60);\n    \n    // Use the enhanced date setting function\n    try {\n        const finalValue = await setDateValue(driver, dobElement, user.dob);\n        console.log(`üìÖ DOB successfully set to: ${finalValue}`);\n    } catch (error) {\n        console.log(`‚ö† Failed to set DOB: ${error.message}`);\n        \n        // Last resort: try different date formats\n        const alternativeFormats = [\n            user.dob, // 2007-06-08\n            user.dob.replace(/-/g, '/'), // 2007/06/08\n            user.dob.split('-').reverse().join('/'), // 08/06/2007\n            user.dob.split('-').slice(1).concat(user.dob.split('-')[0]).join('/') // 06/08/2007\n        ];\n        \n        for (const format of alternativeFormats) {\n            try {\n                console.log(`‚ö†Ô∏è Trying alternative DOB format: ${format}`);\n                await driver.executeScript(`\n                    arguments[0].value = '';\n                    arguments[0].value = arguments[1];\n                    arguments[0].dispatchEvent(new Event('input', { bubbles: true }));\n                    arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\n                `, dobElement, format);\n                \n                const testValue = await dobElement.getAttribute('value');\n                if (testValue.includes('2007') || testValue === format) {\n                    console.log(`‚úÖ Alternative DOB format worked: ${testValue}`);\n                    break;\n                }\n            } catch (altError) {\n                console.log(`‚ö†Ô∏è Alternative format ${format} failed: ${altError.message}`);\n            }\n        }\n    }\n    \n    // Continue with address fields\n    await waitAndFillElement(driver, By.id('address'), user.street);\n    await waitAndFillElement(driver, By.id('postcode'), user.postalCode);\n    await waitAndFillElement(driver, By.id('city'), user.city);\n    await waitAndFillElement(driver, By.id('state'), user.state);\n    \n    // Handle country dropdown\n    console.log('üåç Setting country...');\n    const countrySelect = await findElementWithRetry(driver, By.id('country'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", countrySelect);\n    await driver.sleep(60);\n    \n    try {\n        await countrySelect.click();\n        await driver.sleep(40);\n        await waitAndClick(driver, By.css(`option[value=\"${user.country}\"]`));\n    } catch (error) {\n        console.log('‚ö†Ô∏è Fallback to JavaScript for country selection');\n        await driver.executeScript(`arguments[0].value = '${user.country}';`, countrySelect);\n        await driver.executeScript(\"arguments[0].dispatchEvent(new Event('change', { bubbles: true }));\", countrySelect);\n    }\n    \n    await waitAndFillElement(driver, By.id('phone'), user.phone);\n    await waitAndFillElement(driver, By.id('email'), user.email);\n    \n    // Handle password\n    console.log('üîí Setting password...');\n    const passwordInput = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordInput);\n    await driver.sleep(60);\n    await passwordInput.clear();\n    await passwordInput.sendKeys(user.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Submit form with enhanced error handling\n    const submitButton = await findElementWithRetry(driver, By.css('button[type=\"submit\"]'));\n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // Ensure button is enabled\n    await driver.wait(until.elementIsEnabled(submitButton), 5000);\n    \n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response and check for errors\n    await driver.sleep(600);\n    \n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = currentUrl.includes('/auth/login') ? 'Success' : 'Fail';\n    \n    // Special handling for \"Out of stock\" error\n    if (errorMessage.toLowerCase().includes('out of stock')) {\n        console.log('‚ö†Ô∏è Out of stock error detected - treating as system issue');\n        actualResult = 'SystemError';\n    }\n    \n    if (actualResult === 'Success') {\n        successfulRegistrations.push(user);\n        console.log(`‚úÖ ${user.testCaseID}: Registration SUCCESS - redirected to login`);\n    } else if (actualResult === 'SystemError') {\n        console.log(`‚ö†Ô∏è ${user.testCaseID}: System error (Out of stock) - skipping assertion`);\n        return; // Skip this test due to system error\n    } else {\n        failedRegistrations.push(user.testCaseID);\n        console.log(`‚ö† ${user.testCaseID}: Registration FAILED - still on registration page`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result (skip if system error)\n    if (actualResult !== 'SystemError') {\n        expect(actualResult, `${user.testCaseID} expected ${user.expectedResult}`).to.equal(user.expectedResult);\n    }\n    \n} catch (error) {\n    failedRegistrations.push(user.testCaseID);\n    console.log(`‚ö† ${user.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, user.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "755392fd-dff9-4cad-b5a6-b681ac1899a9",
              "parentUUID": "08195fca-1c51-4151-8efb-04dc48966bc3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "002bf396-cc22-4434-a8ad-b1c3c6797bd8",
            "db7138a0-01c9-447f-9539-86577bd2c310",
            "8d428d36-c322-418b-bd4c-954cab8f0472",
            "eac47d93-d824-4cd5-9f34-503af9b5d3c5",
            "d32625f2-b73d-453c-a106-95839388e88b",
            "e31f51b2-ded4-4a7c-9fc1-b46969af6fe9",
            "48c86c29-9194-4802-8fc5-c45aa122edb6",
            "3b77b8a1-ea4a-4e35-bd72-ae6db3a3b50e",
            "93b8a804-b80b-4cb6-a224-8e40d6901ef1",
            "42a04d9c-8a4d-434b-a801-f925ce22900a",
            "713cd127-dc45-43de-88ba-faefc0a3278b",
            "1e0f8795-7db9-4606-8ba1-1c6a54d38755",
            "0e0560b0-5f71-40f2-93db-8b9d130b5f0e",
            "693442cc-6b16-4ccb-a3a4-efb525fe55cb",
            "2c454ede-cd5f-4240-8f26-4eea7b64427c",
            "36b8b260-c5bf-451d-9452-4adff6c21470",
            "086ad9d4-ac0a-4b59-8c5f-6a35dec8edb2",
            "08715355-9ccd-4f10-b995-cb0530825c4a",
            "5b8c50d5-e1b3-4686-81e0-775decd5a787",
            "18e96003-028e-451a-8fe7-04d5acc08cbb",
            "2b581866-3f0c-4c69-8d4b-91b99e6a1b65",
            "e983119d-8b5b-436b-acdb-16360f8c5d45",
            "df736a80-0c2c-4d69-89ec-dccefbe5115b",
            "7d8339ca-b656-48bc-84a5-1bd89761a755",
            "eb5d28b8-d54c-4e59-9250-e6dd36b71e19",
            "7545e20f-453a-4cc5-97a8-d5fbefb72840",
            "0753575b-7c35-4018-9a5e-c0983fc733dd",
            "b2b354fc-287a-4433-8108-929045f95069",
            "ea149093-6ad0-454e-b637-6da19ec98f4a",
            "f485402b-e30a-4778-bb28-e69841d8cb60",
            "ec3983d1-8647-4961-b88e-5402c073368b",
            "ca47169e-c806-4442-8833-18fa24b2d8c5",
            "58910e49-a931-49f4-948c-36c58e799d23",
            "0645f5fb-8ce8-4b93-9890-43d5d03e8ed3",
            "7278fd16-f49e-49eb-b2b8-84ab05ec6a94",
            "a50d8b5e-2273-43af-b4fd-77bca4b27f32",
            "b15604f3-1307-4a7f-8da2-73752a5382ba",
            "64e22757-29e5-4e58-8e09-66d5c6024c95",
            "4539ce5e-39c2-4fb2-8d36-872f4f5c8ae5",
            "8d9b328a-f7d1-4d1b-829b-6f72a278891a",
            "488ccdb8-99cf-434f-9c4b-8975ef4e1be7",
            "62961712-df05-44b5-9ec8-c6bec135f272",
            "2bbbf5a7-2576-4faa-a055-20509509b0d2",
            "35acecc0-d44a-409f-8174-59836476f9e2",
            "ae15ba99-835b-4f18-bfb4-d3a153943606",
            "4b1fd9c2-a40d-4408-8762-f47408596b47",
            "bac19bec-f775-44e0-baf0-c95d4fac2838",
            "d11ff870-631c-4977-92a3-e0cb6e175301",
            "1120187a-e2a0-41d4-a4aa-2d0445d6db83",
            "f2549873-6396-4075-a801-ae34363804a2",
            "184075a2-0389-4ad4-9c7f-6ffd3647bbe6",
            "2c5d099e-0232-48ad-8d77-bc2dfb90e5ad",
            "0b12deaa-81d2-4aa0-9133-e4fed210531c",
            "0a6218e2-3171-41ad-b931-cb1e1b489d19",
            "38dd5cfb-79d8-4dcb-84d5-e2688fd9de03",
            "56f68f14-b12a-4cf4-aafa-903a66f1b4ee",
            "eef5d1be-7c96-4541-ac31-7e3040ac8f63",
            "ebe87a3e-0f91-4aaa-8edf-3a1b04e3b682",
            "47f4b73b-54d5-46ce-9370-086eb36277b4",
            "6177ccb7-1c65-481c-89c0-395d6fbae292",
            "7d33c11a-5a4d-4f01-89cd-283ef09987f2",
            "ee14b0d3-cbda-4961-9273-1b1fbeb1ff80",
            "b0383d6b-603e-4de8-9d18-244db4e990f0",
            "b6a16c10-56f2-47d8-96ad-9f003517a3f9",
            "106c0c65-453a-4a7f-aa52-4e4ef1a89e31",
            "3d2c04ad-8055-4b39-8722-baee96b1609e",
            "30be26d1-a4bb-46fd-b725-08546a1b67d7",
            "05caf689-b8c9-491c-8d80-e73ee1e0df52",
            "755392fd-dff9-4cad-b5a6-b681ac1899a9"
          ],
          "failures": [
            "e16f1023-70a8-4d7c-a558-f92dbaa81bf6",
            "1f9176f7-1500-4259-a04f-874a24500977"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1227511,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "2c92c48c-5037-4785-aefc-e4984ba6e146",
          "title": "üîê Login Test Suite",
          "fullFile": "C:\\demo-selenium\\tests\\mocha-data-driven.test.js",
          "file": "\\tests\\mocha-data-driven.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"üîê Login Test Suite\"",
              "fullTitle": "üîê Login Test Suite \"before all\" hook in \"üîê Login Test Suite\"",
              "timedOut": false,
              "duration": 826,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.setup);\nconsole.log(`\\nüöÄ Starting login test with ${testLogins.length} test cases`);\n\ndriver = await createDriver(testConfig.browser, testConfig.headless);\nconsole.log('‚úÖ WebDriver initialized successfully for Login');",
              "err": {},
              "uuid": "e54b289d-fadc-484b-9f69-de21b583932c",
              "parentUUID": "2c92c48c-5037-4785-aefc-e4984ba6e146",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"üîê Login Test Suite\"",
              "fullTitle": "üîê Login Test Suite \"after all\" hook in \"üîê Login Test Suite\"",
              "timedOut": false,
              "duration": 49,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.setup);\nif (driver) {\n    await driver.quit();\n    console.log('‚úÖ Login WebDriver closed successfully');\n}\n\nconsole.log(`\\nüìä Login Results Summary:`);\nconsole.log(`‚úÖ Successful: ${successfulLogins.length}/${testLogins.length}`);\nconsole.log(`‚ö† Failed: ${failedLogins.length}/${testLogins.length}`);\n\nif (failedLogins.length > 0) {\n    console.log('\\n‚ö† Failed Login Test Cases:');\n    failedLogins.forEach(tc => console.log(`  - ${tc}`));\n}",
              "err": {},
              "uuid": "36d23a89-1643-4cc1-8e34-c2e31bc6052e",
              "parentUUID": "2c92c48c-5037-4785-aefc-e4984ba6e146",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"üîê Login Test Suite\"",
              "fullTitle": "üîê Login Test Suite \"after each\" hook in \"üîê Login Test Suite\"",
              "timedOut": false,
              "duration": 1064,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    const userMenu = await driver.findElements(By.css('[data-test=\"nav-user-menu\"]'));\n    if (userMenu.length > 0) {\n        await userMenu[0].click();\n        await driver.wait(until.elementLocated(By.css('[data-test=\"nav-sign-out\"]')), testConfig.timeouts.elementWait);\n        await driver.findElement(By.css('[data-test=\"nav-sign-out\"]')).click();\n        console.log(\"üîÑ Logged out after test case\");\n    } else {\n        // N·∫øu kh√¥ng c√≥ user menu th√¨ xo√° cookie cho ch·∫Øc\n        await driver.manage().deleteAllCookies();\n        console.log(\"üßπ Cleared cookies after test case\");\n    }\n} catch (e) {\n    console.log(\"‚ö†Ô∏è Reset state failed:\", e.message);\n}",
              "err": {},
              "uuid": "b756e933-bd96-4418-80c5-52ca931607ae",
              "parentUUID": "2c92c48c-5037-4785-aefc-e4984ba6e146",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "üîê Login Sign In-TC01: abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvw@domain.com",
              "fullTitle": "üîê Login Test Suite üîê Login Sign In-TC01: abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvw@domain.com",
              "timedOut": false,
              "duration": 23752,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting login test ${index + 1}/${testLogins.length}: ${loginCase.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(3000);\n    \n    // Navigate to login page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    \n    // Wait for login form to load completely\n    await driver.wait(until.elementLocated(By.id('email')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill login form\n    console.log('üìã Filling login form...');\n    console.log(`üìß Email: ${loginCase.email}`);\n    console.log(`üîë Password: ${loginCase.password.replace(/./g, '*')}`);\n    \n    // Fill email field\n    await waitAndFillElement(driver, By.id('email'), loginCase.email);\n    \n    // Fill password field - Use specific selector for app-password-input\n    console.log('üîë Filling password field...');\n    const passwordElement = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordElement);\n    await driver.sleep(60);\n    await passwordElement.clear();\n    await passwordElement.sendKeys(loginCase.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Find and click submit button - Use specific selector from HTML\n    const submitSelectors = [\n        '[data-test=\"login-submit\"]',  // From your HTML: data-test=\"login-submit\"\n        'input[type=\"submit\"]',        // From your HTML: input type=\"submit\"\n        'input[value=\"Login\"]',        // From your HTML: value=\"Login\"\n        '.btnSubmit'                   // From your HTML: class=\"btnSubmit\"\n    ];\n    \n    let submitButton = null;\n    for (const selector of submitSelectors) {\n        try {\n            submitButton = await findElementWithRetry(driver, By.css(selector));\n            console.log(`‚úÖ Found submit button with selector: ${selector}`);\n            break;\n        } catch (error) {\n            console.log(`‚ö†Ô∏è Submit selector ${selector} not found, trying next...`);\n        }\n    }\n    \n    if (!submitButton) {\n        throw new Error('Could not find submit button');\n    }\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // For input[type=\"submit\"], use click() method\n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response\n    await driver.sleep(1000);\n    \n    // Check for error messages\n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result by URL or presence of dashboard elements\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = 'Fail'; // Default to fail\n    \n    // Check various success indicators\n    const successIndicators = [\n        () => {\n            const expectedUrl = 'http://localhost:4200/#/account';\n            const isAccountUrl = currentUrl === expectedUrl || currentUrl === expectedUrl + '/';\n            if (isAccountUrl) console.log(`‚úÖ URL kh·ªõp v·ªõi trang t√†i kho·∫£n: ${currentUrl}`);\n            return isAccountUrl;\n        },\n        async () => {\n            const userMenuSelectors = [\n                '[data-test=\"user-menu\"]',\n                '[data-test=\"logout\"]',\n                '.user-menu',\n                'a[href*=\"logout\"]',\n                'button[data-test*=\"logout\"]'\n            ];\n            for (const selector of userMenuSelectors) {\n                try {\n                    const element = await driver.findElement(By.css(selector));\n                    if (await element.isDisplayed()) {\n                        console.log(`‚úÖ T√¨m th·∫•y ph·∫ßn t·ª≠ ng∆∞·ªùi d√πng: ${selector}`);\n                        return true;\n                    }\n                } catch (e) {\n                    console.log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y selector ${selector}`);\n                }\n            }\n            return false;\n        },\n    ];\n    \n    // Test success indicators\n    for (const indicator of successIndicators) {\n        try {\n            const isSuccess = typeof indicator === 'function' ? await indicator() : indicator;\n            if (isSuccess) {\n                actualResult = 'Success';\n                break;\n            }\n        } catch (error) {\n            // Continue to next indicator\n        }\n    }\n    \n    \n    // Log results\n    if (actualResult === 'Success') {\n        successfulLogins.push(loginCase);\n        console.log(`‚úÖ ${loginCase.testCaseID}: Login SUCCESS`);\n        console.log(`   Current URL: ${currentUrl}`);\n    } else {\n        failedLogins.push(loginCase.testCaseID);\n        console.log(`‚ö† ${loginCase.testCaseID}: Login FAILED`);\n        console.log(`   Current URL: ${currentUrl}`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result\n    expect(actualResult, `${loginCase.testCaseID} expected ${loginCase.expectedResult}`).to.equal(loginCase.expectedResult);\n    \n} catch (error) {\n    failedLogins.push(loginCase.testCaseID);\n    console.log(`‚ö† ${loginCase.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, loginCase.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "4b19a47d-bb62-4798-bb9c-d2df19fa318f",
              "parentUUID": "2c92c48c-5037-4785-aefc-e4984ba6e146",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üîê Login Sign In-TC02: user@domain",
              "fullTitle": "üîê Login Test Suite üîê Login Sign In-TC02: user@domain",
              "timedOut": false,
              "duration": 13132,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting login test ${index + 1}/${testLogins.length}: ${loginCase.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(3000);\n    \n    // Navigate to login page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    \n    // Wait for login form to load completely\n    await driver.wait(until.elementLocated(By.id('email')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill login form\n    console.log('üìã Filling login form...');\n    console.log(`üìß Email: ${loginCase.email}`);\n    console.log(`üîë Password: ${loginCase.password.replace(/./g, '*')}`);\n    \n    // Fill email field\n    await waitAndFillElement(driver, By.id('email'), loginCase.email);\n    \n    // Fill password field - Use specific selector for app-password-input\n    console.log('üîë Filling password field...');\n    const passwordElement = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordElement);\n    await driver.sleep(60);\n    await passwordElement.clear();\n    await passwordElement.sendKeys(loginCase.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Find and click submit button - Use specific selector from HTML\n    const submitSelectors = [\n        '[data-test=\"login-submit\"]',  // From your HTML: data-test=\"login-submit\"\n        'input[type=\"submit\"]',        // From your HTML: input type=\"submit\"\n        'input[value=\"Login\"]',        // From your HTML: value=\"Login\"\n        '.btnSubmit'                   // From your HTML: class=\"btnSubmit\"\n    ];\n    \n    let submitButton = null;\n    for (const selector of submitSelectors) {\n        try {\n            submitButton = await findElementWithRetry(driver, By.css(selector));\n            console.log(`‚úÖ Found submit button with selector: ${selector}`);\n            break;\n        } catch (error) {\n            console.log(`‚ö†Ô∏è Submit selector ${selector} not found, trying next...`);\n        }\n    }\n    \n    if (!submitButton) {\n        throw new Error('Could not find submit button');\n    }\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // For input[type=\"submit\"], use click() method\n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response\n    await driver.sleep(1000);\n    \n    // Check for error messages\n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result by URL or presence of dashboard elements\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = 'Fail'; // Default to fail\n    \n    // Check various success indicators\n    const successIndicators = [\n        () => {\n            const expectedUrl = 'http://localhost:4200/#/account';\n            const isAccountUrl = currentUrl === expectedUrl || currentUrl === expectedUrl + '/';\n            if (isAccountUrl) console.log(`‚úÖ URL kh·ªõp v·ªõi trang t√†i kho·∫£n: ${currentUrl}`);\n            return isAccountUrl;\n        },\n        async () => {\n            const userMenuSelectors = [\n                '[data-test=\"user-menu\"]',\n                '[data-test=\"logout\"]',\n                '.user-menu',\n                'a[href*=\"logout\"]',\n                'button[data-test*=\"logout\"]'\n            ];\n            for (const selector of userMenuSelectors) {\n                try {\n                    const element = await driver.findElement(By.css(selector));\n                    if (await element.isDisplayed()) {\n                        console.log(`‚úÖ T√¨m th·∫•y ph·∫ßn t·ª≠ ng∆∞·ªùi d√πng: ${selector}`);\n                        return true;\n                    }\n                } catch (e) {\n                    console.log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y selector ${selector}`);\n                }\n            }\n            return false;\n        },\n    ];\n    \n    // Test success indicators\n    for (const indicator of successIndicators) {\n        try {\n            const isSuccess = typeof indicator === 'function' ? await indicator() : indicator;\n            if (isSuccess) {\n                actualResult = 'Success';\n                break;\n            }\n        } catch (error) {\n            // Continue to next indicator\n        }\n    }\n    \n    \n    // Log results\n    if (actualResult === 'Success') {\n        successfulLogins.push(loginCase);\n        console.log(`‚úÖ ${loginCase.testCaseID}: Login SUCCESS`);\n        console.log(`   Current URL: ${currentUrl}`);\n    } else {\n        failedLogins.push(loginCase.testCaseID);\n        console.log(`‚ö† ${loginCase.testCaseID}: Login FAILED`);\n        console.log(`   Current URL: ${currentUrl}`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result\n    expect(actualResult, `${loginCase.testCaseID} expected ${loginCase.expectedResult}`).to.equal(loginCase.expectedResult);\n    \n} catch (error) {\n    failedLogins.push(loginCase.testCaseID);\n    console.log(`‚ö† ${loginCase.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, loginCase.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "d5363e61-7424-4ee1-a435-d6ab7ab569b8",
              "parentUUID": "2c92c48c-5037-4785-aefc-e4984ba6e146",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üîê Login Sign In-TC03: a@b.c",
              "fullTitle": "üîê Login Test Suite üîê Login Sign In-TC03: a@b.c",
              "timedOut": false,
              "duration": 12969,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting login test ${index + 1}/${testLogins.length}: ${loginCase.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(3000);\n    \n    // Navigate to login page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    \n    // Wait for login form to load completely\n    await driver.wait(until.elementLocated(By.id('email')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill login form\n    console.log('üìã Filling login form...');\n    console.log(`üìß Email: ${loginCase.email}`);\n    console.log(`üîë Password: ${loginCase.password.replace(/./g, '*')}`);\n    \n    // Fill email field\n    await waitAndFillElement(driver, By.id('email'), loginCase.email);\n    \n    // Fill password field - Use specific selector for app-password-input\n    console.log('üîë Filling password field...');\n    const passwordElement = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordElement);\n    await driver.sleep(60);\n    await passwordElement.clear();\n    await passwordElement.sendKeys(loginCase.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Find and click submit button - Use specific selector from HTML\n    const submitSelectors = [\n        '[data-test=\"login-submit\"]',  // From your HTML: data-test=\"login-submit\"\n        'input[type=\"submit\"]',        // From your HTML: input type=\"submit\"\n        'input[value=\"Login\"]',        // From your HTML: value=\"Login\"\n        '.btnSubmit'                   // From your HTML: class=\"btnSubmit\"\n    ];\n    \n    let submitButton = null;\n    for (const selector of submitSelectors) {\n        try {\n            submitButton = await findElementWithRetry(driver, By.css(selector));\n            console.log(`‚úÖ Found submit button with selector: ${selector}`);\n            break;\n        } catch (error) {\n            console.log(`‚ö†Ô∏è Submit selector ${selector} not found, trying next...`);\n        }\n    }\n    \n    if (!submitButton) {\n        throw new Error('Could not find submit button');\n    }\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // For input[type=\"submit\"], use click() method\n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response\n    await driver.sleep(1000);\n    \n    // Check for error messages\n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result by URL or presence of dashboard elements\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = 'Fail'; // Default to fail\n    \n    // Check various success indicators\n    const successIndicators = [\n        () => {\n            const expectedUrl = 'http://localhost:4200/#/account';\n            const isAccountUrl = currentUrl === expectedUrl || currentUrl === expectedUrl + '/';\n            if (isAccountUrl) console.log(`‚úÖ URL kh·ªõp v·ªõi trang t√†i kho·∫£n: ${currentUrl}`);\n            return isAccountUrl;\n        },\n        async () => {\n            const userMenuSelectors = [\n                '[data-test=\"user-menu\"]',\n                '[data-test=\"logout\"]',\n                '.user-menu',\n                'a[href*=\"logout\"]',\n                'button[data-test*=\"logout\"]'\n            ];\n            for (const selector of userMenuSelectors) {\n                try {\n                    const element = await driver.findElement(By.css(selector));\n                    if (await element.isDisplayed()) {\n                        console.log(`‚úÖ T√¨m th·∫•y ph·∫ßn t·ª≠ ng∆∞·ªùi d√πng: ${selector}`);\n                        return true;\n                    }\n                } catch (e) {\n                    console.log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y selector ${selector}`);\n                }\n            }\n            return false;\n        },\n    ];\n    \n    // Test success indicators\n    for (const indicator of successIndicators) {\n        try {\n            const isSuccess = typeof indicator === 'function' ? await indicator() : indicator;\n            if (isSuccess) {\n                actualResult = 'Success';\n                break;\n            }\n        } catch (error) {\n            // Continue to next indicator\n        }\n    }\n    \n    \n    // Log results\n    if (actualResult === 'Success') {\n        successfulLogins.push(loginCase);\n        console.log(`‚úÖ ${loginCase.testCaseID}: Login SUCCESS`);\n        console.log(`   Current URL: ${currentUrl}`);\n    } else {\n        failedLogins.push(loginCase.testCaseID);\n        console.log(`‚ö† ${loginCase.testCaseID}: Login FAILED`);\n        console.log(`   Current URL: ${currentUrl}`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result\n    expect(actualResult, `${loginCase.testCaseID} expected ${loginCase.expectedResult}`).to.equal(loginCase.expectedResult);\n    \n} catch (error) {\n    failedLogins.push(loginCase.testCaseID);\n    console.log(`‚ö† ${loginCase.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, loginCase.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "bd98d4ca-98db-4ced-a33d-56c989c90d62",
              "parentUUID": "2c92c48c-5037-4785-aefc-e4984ba6e146",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üîê Login Sign In-TC04: a@a.vn",
              "fullTitle": "üîê Login Test Suite üîê Login Sign In-TC04: a@a.vn",
              "timedOut": false,
              "duration": 23397,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting login test ${index + 1}/${testLogins.length}: ${loginCase.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(3000);\n    \n    // Navigate to login page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    \n    // Wait for login form to load completely\n    await driver.wait(until.elementLocated(By.id('email')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill login form\n    console.log('üìã Filling login form...');\n    console.log(`üìß Email: ${loginCase.email}`);\n    console.log(`üîë Password: ${loginCase.password.replace(/./g, '*')}`);\n    \n    // Fill email field\n    await waitAndFillElement(driver, By.id('email'), loginCase.email);\n    \n    // Fill password field - Use specific selector for app-password-input\n    console.log('üîë Filling password field...');\n    const passwordElement = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordElement);\n    await driver.sleep(60);\n    await passwordElement.clear();\n    await passwordElement.sendKeys(loginCase.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Find and click submit button - Use specific selector from HTML\n    const submitSelectors = [\n        '[data-test=\"login-submit\"]',  // From your HTML: data-test=\"login-submit\"\n        'input[type=\"submit\"]',        // From your HTML: input type=\"submit\"\n        'input[value=\"Login\"]',        // From your HTML: value=\"Login\"\n        '.btnSubmit'                   // From your HTML: class=\"btnSubmit\"\n    ];\n    \n    let submitButton = null;\n    for (const selector of submitSelectors) {\n        try {\n            submitButton = await findElementWithRetry(driver, By.css(selector));\n            console.log(`‚úÖ Found submit button with selector: ${selector}`);\n            break;\n        } catch (error) {\n            console.log(`‚ö†Ô∏è Submit selector ${selector} not found, trying next...`);\n        }\n    }\n    \n    if (!submitButton) {\n        throw new Error('Could not find submit button');\n    }\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // For input[type=\"submit\"], use click() method\n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response\n    await driver.sleep(1000);\n    \n    // Check for error messages\n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result by URL or presence of dashboard elements\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = 'Fail'; // Default to fail\n    \n    // Check various success indicators\n    const successIndicators = [\n        () => {\n            const expectedUrl = 'http://localhost:4200/#/account';\n            const isAccountUrl = currentUrl === expectedUrl || currentUrl === expectedUrl + '/';\n            if (isAccountUrl) console.log(`‚úÖ URL kh·ªõp v·ªõi trang t√†i kho·∫£n: ${currentUrl}`);\n            return isAccountUrl;\n        },\n        async () => {\n            const userMenuSelectors = [\n                '[data-test=\"user-menu\"]',\n                '[data-test=\"logout\"]',\n                '.user-menu',\n                'a[href*=\"logout\"]',\n                'button[data-test*=\"logout\"]'\n            ];\n            for (const selector of userMenuSelectors) {\n                try {\n                    const element = await driver.findElement(By.css(selector));\n                    if (await element.isDisplayed()) {\n                        console.log(`‚úÖ T√¨m th·∫•y ph·∫ßn t·ª≠ ng∆∞·ªùi d√πng: ${selector}`);\n                        return true;\n                    }\n                } catch (e) {\n                    console.log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y selector ${selector}`);\n                }\n            }\n            return false;\n        },\n    ];\n    \n    // Test success indicators\n    for (const indicator of successIndicators) {\n        try {\n            const isSuccess = typeof indicator === 'function' ? await indicator() : indicator;\n            if (isSuccess) {\n                actualResult = 'Success';\n                break;\n            }\n        } catch (error) {\n            // Continue to next indicator\n        }\n    }\n    \n    \n    // Log results\n    if (actualResult === 'Success') {\n        successfulLogins.push(loginCase);\n        console.log(`‚úÖ ${loginCase.testCaseID}: Login SUCCESS`);\n        console.log(`   Current URL: ${currentUrl}`);\n    } else {\n        failedLogins.push(loginCase.testCaseID);\n        console.log(`‚ö† ${loginCase.testCaseID}: Login FAILED`);\n        console.log(`   Current URL: ${currentUrl}`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result\n    expect(actualResult, `${loginCase.testCaseID} expected ${loginCase.expectedResult}`).to.equal(loginCase.expectedResult);\n    \n} catch (error) {\n    failedLogins.push(loginCase.testCaseID);\n    console.log(`‚ö† ${loginCase.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, loginCase.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "1ddb1005-62a6-4666-b46e-5574d6b372ad",
              "parentUUID": "2c92c48c-5037-4785-aefc-e4984ba6e146",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üîê Login Sign In-TC05: ab@c.vn",
              "fullTitle": "üîê Login Test Suite üîê Login Sign In-TC05: ab@c.vn",
              "timedOut": false,
              "duration": 23438,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting login test ${index + 1}/${testLogins.length}: ${loginCase.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(3000);\n    \n    // Navigate to login page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    \n    // Wait for login form to load completely\n    await driver.wait(until.elementLocated(By.id('email')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill login form\n    console.log('üìã Filling login form...');\n    console.log(`üìß Email: ${loginCase.email}`);\n    console.log(`üîë Password: ${loginCase.password.replace(/./g, '*')}`);\n    \n    // Fill email field\n    await waitAndFillElement(driver, By.id('email'), loginCase.email);\n    \n    // Fill password field - Use specific selector for app-password-input\n    console.log('üîë Filling password field...');\n    const passwordElement = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordElement);\n    await driver.sleep(60);\n    await passwordElement.clear();\n    await passwordElement.sendKeys(loginCase.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Find and click submit button - Use specific selector from HTML\n    const submitSelectors = [\n        '[data-test=\"login-submit\"]',  // From your HTML: data-test=\"login-submit\"\n        'input[type=\"submit\"]',        // From your HTML: input type=\"submit\"\n        'input[value=\"Login\"]',        // From your HTML: value=\"Login\"\n        '.btnSubmit'                   // From your HTML: class=\"btnSubmit\"\n    ];\n    \n    let submitButton = null;\n    for (const selector of submitSelectors) {\n        try {\n            submitButton = await findElementWithRetry(driver, By.css(selector));\n            console.log(`‚úÖ Found submit button with selector: ${selector}`);\n            break;\n        } catch (error) {\n            console.log(`‚ö†Ô∏è Submit selector ${selector} not found, trying next...`);\n        }\n    }\n    \n    if (!submitButton) {\n        throw new Error('Could not find submit button');\n    }\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // For input[type=\"submit\"], use click() method\n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response\n    await driver.sleep(1000);\n    \n    // Check for error messages\n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result by URL or presence of dashboard elements\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = 'Fail'; // Default to fail\n    \n    // Check various success indicators\n    const successIndicators = [\n        () => {\n            const expectedUrl = 'http://localhost:4200/#/account';\n            const isAccountUrl = currentUrl === expectedUrl || currentUrl === expectedUrl + '/';\n            if (isAccountUrl) console.log(`‚úÖ URL kh·ªõp v·ªõi trang t√†i kho·∫£n: ${currentUrl}`);\n            return isAccountUrl;\n        },\n        async () => {\n            const userMenuSelectors = [\n                '[data-test=\"user-menu\"]',\n                '[data-test=\"logout\"]',\n                '.user-menu',\n                'a[href*=\"logout\"]',\n                'button[data-test*=\"logout\"]'\n            ];\n            for (const selector of userMenuSelectors) {\n                try {\n                    const element = await driver.findElement(By.css(selector));\n                    if (await element.isDisplayed()) {\n                        console.log(`‚úÖ T√¨m th·∫•y ph·∫ßn t·ª≠ ng∆∞·ªùi d√πng: ${selector}`);\n                        return true;\n                    }\n                } catch (e) {\n                    console.log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y selector ${selector}`);\n                }\n            }\n            return false;\n        },\n    ];\n    \n    // Test success indicators\n    for (const indicator of successIndicators) {\n        try {\n            const isSuccess = typeof indicator === 'function' ? await indicator() : indicator;\n            if (isSuccess) {\n                actualResult = 'Success';\n                break;\n            }\n        } catch (error) {\n            // Continue to next indicator\n        }\n    }\n    \n    \n    // Log results\n    if (actualResult === 'Success') {\n        successfulLogins.push(loginCase);\n        console.log(`‚úÖ ${loginCase.testCaseID}: Login SUCCESS`);\n        console.log(`   Current URL: ${currentUrl}`);\n    } else {\n        failedLogins.push(loginCase.testCaseID);\n        console.log(`‚ö† ${loginCase.testCaseID}: Login FAILED`);\n        console.log(`   Current URL: ${currentUrl}`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result\n    expect(actualResult, `${loginCase.testCaseID} expected ${loginCase.expectedResult}`).to.equal(loginCase.expectedResult);\n    \n} catch (error) {\n    failedLogins.push(loginCase.testCaseID);\n    console.log(`‚ö† ${loginCase.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, loginCase.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "5199ee57-981b-4bc8-8d81-e4fd74ed4776",
              "parentUUID": "2c92c48c-5037-4785-aefc-e4984ba6e146",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üîê Login Sign In-TC06: abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuv@domain.com",
              "fullTitle": "üîê Login Test Suite üîê Login Sign In-TC06: abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuv@domain.com",
              "timedOut": false,
              "duration": 23465,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting login test ${index + 1}/${testLogins.length}: ${loginCase.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(3000);\n    \n    // Navigate to login page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    \n    // Wait for login form to load completely\n    await driver.wait(until.elementLocated(By.id('email')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill login form\n    console.log('üìã Filling login form...');\n    console.log(`üìß Email: ${loginCase.email}`);\n    console.log(`üîë Password: ${loginCase.password.replace(/./g, '*')}`);\n    \n    // Fill email field\n    await waitAndFillElement(driver, By.id('email'), loginCase.email);\n    \n    // Fill password field - Use specific selector for app-password-input\n    console.log('üîë Filling password field...');\n    const passwordElement = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordElement);\n    await driver.sleep(60);\n    await passwordElement.clear();\n    await passwordElement.sendKeys(loginCase.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Find and click submit button - Use specific selector from HTML\n    const submitSelectors = [\n        '[data-test=\"login-submit\"]',  // From your HTML: data-test=\"login-submit\"\n        'input[type=\"submit\"]',        // From your HTML: input type=\"submit\"\n        'input[value=\"Login\"]',        // From your HTML: value=\"Login\"\n        '.btnSubmit'                   // From your HTML: class=\"btnSubmit\"\n    ];\n    \n    let submitButton = null;\n    for (const selector of submitSelectors) {\n        try {\n            submitButton = await findElementWithRetry(driver, By.css(selector));\n            console.log(`‚úÖ Found submit button with selector: ${selector}`);\n            break;\n        } catch (error) {\n            console.log(`‚ö†Ô∏è Submit selector ${selector} not found, trying next...`);\n        }\n    }\n    \n    if (!submitButton) {\n        throw new Error('Could not find submit button');\n    }\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // For input[type=\"submit\"], use click() method\n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response\n    await driver.sleep(1000);\n    \n    // Check for error messages\n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result by URL or presence of dashboard elements\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = 'Fail'; // Default to fail\n    \n    // Check various success indicators\n    const successIndicators = [\n        () => {\n            const expectedUrl = 'http://localhost:4200/#/account';\n            const isAccountUrl = currentUrl === expectedUrl || currentUrl === expectedUrl + '/';\n            if (isAccountUrl) console.log(`‚úÖ URL kh·ªõp v·ªõi trang t√†i kho·∫£n: ${currentUrl}`);\n            return isAccountUrl;\n        },\n        async () => {\n            const userMenuSelectors = [\n                '[data-test=\"user-menu\"]',\n                '[data-test=\"logout\"]',\n                '.user-menu',\n                'a[href*=\"logout\"]',\n                'button[data-test*=\"logout\"]'\n            ];\n            for (const selector of userMenuSelectors) {\n                try {\n                    const element = await driver.findElement(By.css(selector));\n                    if (await element.isDisplayed()) {\n                        console.log(`‚úÖ T√¨m th·∫•y ph·∫ßn t·ª≠ ng∆∞·ªùi d√πng: ${selector}`);\n                        return true;\n                    }\n                } catch (e) {\n                    console.log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y selector ${selector}`);\n                }\n            }\n            return false;\n        },\n    ];\n    \n    // Test success indicators\n    for (const indicator of successIndicators) {\n        try {\n            const isSuccess = typeof indicator === 'function' ? await indicator() : indicator;\n            if (isSuccess) {\n                actualResult = 'Success';\n                break;\n            }\n        } catch (error) {\n            // Continue to next indicator\n        }\n    }\n    \n    \n    // Log results\n    if (actualResult === 'Success') {\n        successfulLogins.push(loginCase);\n        console.log(`‚úÖ ${loginCase.testCaseID}: Login SUCCESS`);\n        console.log(`   Current URL: ${currentUrl}`);\n    } else {\n        failedLogins.push(loginCase.testCaseID);\n        console.log(`‚ö† ${loginCase.testCaseID}: Login FAILED`);\n        console.log(`   Current URL: ${currentUrl}`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result\n    expect(actualResult, `${loginCase.testCaseID} expected ${loginCase.expectedResult}`).to.equal(loginCase.expectedResult);\n    \n} catch (error) {\n    failedLogins.push(loginCase.testCaseID);\n    console.log(`‚ö† ${loginCase.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, loginCase.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "50b54936-d337-4cce-ae44-6e5ed28481aa",
              "parentUUID": "2c92c48c-5037-4785-aefc-e4984ba6e146",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üîê Login Sign In-TC07: abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuv2@domain.com",
              "fullTitle": "üîê Login Test Suite üîê Login Sign In-TC07: abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuv2@domain.com",
              "timedOut": false,
              "duration": 23702,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting login test ${index + 1}/${testLogins.length}: ${loginCase.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(3000);\n    \n    // Navigate to login page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    \n    // Wait for login form to load completely\n    await driver.wait(until.elementLocated(By.id('email')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill login form\n    console.log('üìã Filling login form...');\n    console.log(`üìß Email: ${loginCase.email}`);\n    console.log(`üîë Password: ${loginCase.password.replace(/./g, '*')}`);\n    \n    // Fill email field\n    await waitAndFillElement(driver, By.id('email'), loginCase.email);\n    \n    // Fill password field - Use specific selector for app-password-input\n    console.log('üîë Filling password field...');\n    const passwordElement = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordElement);\n    await driver.sleep(60);\n    await passwordElement.clear();\n    await passwordElement.sendKeys(loginCase.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Find and click submit button - Use specific selector from HTML\n    const submitSelectors = [\n        '[data-test=\"login-submit\"]',  // From your HTML: data-test=\"login-submit\"\n        'input[type=\"submit\"]',        // From your HTML: input type=\"submit\"\n        'input[value=\"Login\"]',        // From your HTML: value=\"Login\"\n        '.btnSubmit'                   // From your HTML: class=\"btnSubmit\"\n    ];\n    \n    let submitButton = null;\n    for (const selector of submitSelectors) {\n        try {\n            submitButton = await findElementWithRetry(driver, By.css(selector));\n            console.log(`‚úÖ Found submit button with selector: ${selector}`);\n            break;\n        } catch (error) {\n            console.log(`‚ö†Ô∏è Submit selector ${selector} not found, trying next...`);\n        }\n    }\n    \n    if (!submitButton) {\n        throw new Error('Could not find submit button');\n    }\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // For input[type=\"submit\"], use click() method\n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response\n    await driver.sleep(1000);\n    \n    // Check for error messages\n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result by URL or presence of dashboard elements\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = 'Fail'; // Default to fail\n    \n    // Check various success indicators\n    const successIndicators = [\n        () => {\n            const expectedUrl = 'http://localhost:4200/#/account';\n            const isAccountUrl = currentUrl === expectedUrl || currentUrl === expectedUrl + '/';\n            if (isAccountUrl) console.log(`‚úÖ URL kh·ªõp v·ªõi trang t√†i kho·∫£n: ${currentUrl}`);\n            return isAccountUrl;\n        },\n        async () => {\n            const userMenuSelectors = [\n                '[data-test=\"user-menu\"]',\n                '[data-test=\"logout\"]',\n                '.user-menu',\n                'a[href*=\"logout\"]',\n                'button[data-test*=\"logout\"]'\n            ];\n            for (const selector of userMenuSelectors) {\n                try {\n                    const element = await driver.findElement(By.css(selector));\n                    if (await element.isDisplayed()) {\n                        console.log(`‚úÖ T√¨m th·∫•y ph·∫ßn t·ª≠ ng∆∞·ªùi d√πng: ${selector}`);\n                        return true;\n                    }\n                } catch (e) {\n                    console.log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y selector ${selector}`);\n                }\n            }\n            return false;\n        },\n    ];\n    \n    // Test success indicators\n    for (const indicator of successIndicators) {\n        try {\n            const isSuccess = typeof indicator === 'function' ? await indicator() : indicator;\n            if (isSuccess) {\n                actualResult = 'Success';\n                break;\n            }\n        } catch (error) {\n            // Continue to next indicator\n        }\n    }\n    \n    \n    // Log results\n    if (actualResult === 'Success') {\n        successfulLogins.push(loginCase);\n        console.log(`‚úÖ ${loginCase.testCaseID}: Login SUCCESS`);\n        console.log(`   Current URL: ${currentUrl}`);\n    } else {\n        failedLogins.push(loginCase.testCaseID);\n        console.log(`‚ö† ${loginCase.testCaseID}: Login FAILED`);\n        console.log(`   Current URL: ${currentUrl}`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result\n    expect(actualResult, `${loginCase.testCaseID} expected ${loginCase.expectedResult}`).to.equal(loginCase.expectedResult);\n    \n} catch (error) {\n    failedLogins.push(loginCase.testCaseID);\n    console.log(`‚ö† ${loginCase.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, loginCase.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "e33b82a0-5d02-4558-b8df-cfa1d0d36b0b",
              "parentUUID": "2c92c48c-5037-4785-aefc-e4984ba6e146",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üîê Login Sign In-TC08: abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwy@domain.com",
              "fullTitle": "üîê Login Test Suite üîê Login Sign In-TC08: abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwy@domain.com",
              "timedOut": false,
              "duration": 12941,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting login test ${index + 1}/${testLogins.length}: ${loginCase.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(3000);\n    \n    // Navigate to login page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    \n    // Wait for login form to load completely\n    await driver.wait(until.elementLocated(By.id('email')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill login form\n    console.log('üìã Filling login form...');\n    console.log(`üìß Email: ${loginCase.email}`);\n    console.log(`üîë Password: ${loginCase.password.replace(/./g, '*')}`);\n    \n    // Fill email field\n    await waitAndFillElement(driver, By.id('email'), loginCase.email);\n    \n    // Fill password field - Use specific selector for app-password-input\n    console.log('üîë Filling password field...');\n    const passwordElement = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordElement);\n    await driver.sleep(60);\n    await passwordElement.clear();\n    await passwordElement.sendKeys(loginCase.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Find and click submit button - Use specific selector from HTML\n    const submitSelectors = [\n        '[data-test=\"login-submit\"]',  // From your HTML: data-test=\"login-submit\"\n        'input[type=\"submit\"]',        // From your HTML: input type=\"submit\"\n        'input[value=\"Login\"]',        // From your HTML: value=\"Login\"\n        '.btnSubmit'                   // From your HTML: class=\"btnSubmit\"\n    ];\n    \n    let submitButton = null;\n    for (const selector of submitSelectors) {\n        try {\n            submitButton = await findElementWithRetry(driver, By.css(selector));\n            console.log(`‚úÖ Found submit button with selector: ${selector}`);\n            break;\n        } catch (error) {\n            console.log(`‚ö†Ô∏è Submit selector ${selector} not found, trying next...`);\n        }\n    }\n    \n    if (!submitButton) {\n        throw new Error('Could not find submit button');\n    }\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // For input[type=\"submit\"], use click() method\n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response\n    await driver.sleep(1000);\n    \n    // Check for error messages\n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result by URL or presence of dashboard elements\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = 'Fail'; // Default to fail\n    \n    // Check various success indicators\n    const successIndicators = [\n        () => {\n            const expectedUrl = 'http://localhost:4200/#/account';\n            const isAccountUrl = currentUrl === expectedUrl || currentUrl === expectedUrl + '/';\n            if (isAccountUrl) console.log(`‚úÖ URL kh·ªõp v·ªõi trang t√†i kho·∫£n: ${currentUrl}`);\n            return isAccountUrl;\n        },\n        async () => {\n            const userMenuSelectors = [\n                '[data-test=\"user-menu\"]',\n                '[data-test=\"logout\"]',\n                '.user-menu',\n                'a[href*=\"logout\"]',\n                'button[data-test*=\"logout\"]'\n            ];\n            for (const selector of userMenuSelectors) {\n                try {\n                    const element = await driver.findElement(By.css(selector));\n                    if (await element.isDisplayed()) {\n                        console.log(`‚úÖ T√¨m th·∫•y ph·∫ßn t·ª≠ ng∆∞·ªùi d√πng: ${selector}`);\n                        return true;\n                    }\n                } catch (e) {\n                    console.log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y selector ${selector}`);\n                }\n            }\n            return false;\n        },\n    ];\n    \n    // Test success indicators\n    for (const indicator of successIndicators) {\n        try {\n            const isSuccess = typeof indicator === 'function' ? await indicator() : indicator;\n            if (isSuccess) {\n                actualResult = 'Success';\n                break;\n            }\n        } catch (error) {\n            // Continue to next indicator\n        }\n    }\n    \n    \n    // Log results\n    if (actualResult === 'Success') {\n        successfulLogins.push(loginCase);\n        console.log(`‚úÖ ${loginCase.testCaseID}: Login SUCCESS`);\n        console.log(`   Current URL: ${currentUrl}`);\n    } else {\n        failedLogins.push(loginCase.testCaseID);\n        console.log(`‚ö† ${loginCase.testCaseID}: Login FAILED`);\n        console.log(`   Current URL: ${currentUrl}`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result\n    expect(actualResult, `${loginCase.testCaseID} expected ${loginCase.expectedResult}`).to.equal(loginCase.expectedResult);\n    \n} catch (error) {\n    failedLogins.push(loginCase.testCaseID);\n    console.log(`‚ö† ${loginCase.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, loginCase.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "e2b2b6d8-d12d-4ac3-a17e-a3cba82cbd0b",
              "parentUUID": "2c92c48c-5037-4785-aefc-e4984ba6e146",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üîê Login Sign In-TC09: tc09@a.vn",
              "fullTitle": "üîê Login Test Suite üîê Login Sign In-TC09: tc09@a.vn",
              "timedOut": false,
              "duration": 23511,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting login test ${index + 1}/${testLogins.length}: ${loginCase.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(3000);\n    \n    // Navigate to login page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    \n    // Wait for login form to load completely\n    await driver.wait(until.elementLocated(By.id('email')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill login form\n    console.log('üìã Filling login form...');\n    console.log(`üìß Email: ${loginCase.email}`);\n    console.log(`üîë Password: ${loginCase.password.replace(/./g, '*')}`);\n    \n    // Fill email field\n    await waitAndFillElement(driver, By.id('email'), loginCase.email);\n    \n    // Fill password field - Use specific selector for app-password-input\n    console.log('üîë Filling password field...');\n    const passwordElement = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordElement);\n    await driver.sleep(60);\n    await passwordElement.clear();\n    await passwordElement.sendKeys(loginCase.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Find and click submit button - Use specific selector from HTML\n    const submitSelectors = [\n        '[data-test=\"login-submit\"]',  // From your HTML: data-test=\"login-submit\"\n        'input[type=\"submit\"]',        // From your HTML: input type=\"submit\"\n        'input[value=\"Login\"]',        // From your HTML: value=\"Login\"\n        '.btnSubmit'                   // From your HTML: class=\"btnSubmit\"\n    ];\n    \n    let submitButton = null;\n    for (const selector of submitSelectors) {\n        try {\n            submitButton = await findElementWithRetry(driver, By.css(selector));\n            console.log(`‚úÖ Found submit button with selector: ${selector}`);\n            break;\n        } catch (error) {\n            console.log(`‚ö†Ô∏è Submit selector ${selector} not found, trying next...`);\n        }\n    }\n    \n    if (!submitButton) {\n        throw new Error('Could not find submit button');\n    }\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // For input[type=\"submit\"], use click() method\n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response\n    await driver.sleep(1000);\n    \n    // Check for error messages\n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result by URL or presence of dashboard elements\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = 'Fail'; // Default to fail\n    \n    // Check various success indicators\n    const successIndicators = [\n        () => {\n            const expectedUrl = 'http://localhost:4200/#/account';\n            const isAccountUrl = currentUrl === expectedUrl || currentUrl === expectedUrl + '/';\n            if (isAccountUrl) console.log(`‚úÖ URL kh·ªõp v·ªõi trang t√†i kho·∫£n: ${currentUrl}`);\n            return isAccountUrl;\n        },\n        async () => {\n            const userMenuSelectors = [\n                '[data-test=\"user-menu\"]',\n                '[data-test=\"logout\"]',\n                '.user-menu',\n                'a[href*=\"logout\"]',\n                'button[data-test*=\"logout\"]'\n            ];\n            for (const selector of userMenuSelectors) {\n                try {\n                    const element = await driver.findElement(By.css(selector));\n                    if (await element.isDisplayed()) {\n                        console.log(`‚úÖ T√¨m th·∫•y ph·∫ßn t·ª≠ ng∆∞·ªùi d√πng: ${selector}`);\n                        return true;\n                    }\n                } catch (e) {\n                    console.log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y selector ${selector}`);\n                }\n            }\n            return false;\n        },\n    ];\n    \n    // Test success indicators\n    for (const indicator of successIndicators) {\n        try {\n            const isSuccess = typeof indicator === 'function' ? await indicator() : indicator;\n            if (isSuccess) {\n                actualResult = 'Success';\n                break;\n            }\n        } catch (error) {\n            // Continue to next indicator\n        }\n    }\n    \n    \n    // Log results\n    if (actualResult === 'Success') {\n        successfulLogins.push(loginCase);\n        console.log(`‚úÖ ${loginCase.testCaseID}: Login SUCCESS`);\n        console.log(`   Current URL: ${currentUrl}`);\n    } else {\n        failedLogins.push(loginCase.testCaseID);\n        console.log(`‚ö† ${loginCase.testCaseID}: Login FAILED`);\n        console.log(`   Current URL: ${currentUrl}`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result\n    expect(actualResult, `${loginCase.testCaseID} expected ${loginCase.expectedResult}`).to.equal(loginCase.expectedResult);\n    \n} catch (error) {\n    failedLogins.push(loginCase.testCaseID);\n    console.log(`‚ö† ${loginCase.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, loginCase.testCaseID);\n    \n    throw error;\n}",
              "err": {
                "message": "AssertionError: Sign In-TC09 expected Fail: expected 'Success' to equal 'Fail'",
                "estack": "AssertionError: Sign In-TC09 expected Fail: expected 'Success' to equal 'Fail'\n    at Context.<anonymous> (file:///C:/demo-selenium/tests/mocha-data-driven.test.js:774:105)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- Success\n+ Fail\n"
              },
              "uuid": "96e68f98-48b2-4cc9-acbf-4fc1d9004468",
              "parentUUID": "2c92c48c-5037-4785-aefc-e4984ba6e146",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üîê Login Sign In-TC10: tc10@a.vn",
              "fullTitle": "üîê Login Test Suite üîê Login Sign In-TC10: tc10@a.vn",
              "timedOut": false,
              "duration": 23516,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting login test ${index + 1}/${testLogins.length}: ${loginCase.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(3000);\n    \n    // Navigate to login page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    \n    // Wait for login form to load completely\n    await driver.wait(until.elementLocated(By.id('email')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill login form\n    console.log('üìã Filling login form...');\n    console.log(`üìß Email: ${loginCase.email}`);\n    console.log(`üîë Password: ${loginCase.password.replace(/./g, '*')}`);\n    \n    // Fill email field\n    await waitAndFillElement(driver, By.id('email'), loginCase.email);\n    \n    // Fill password field - Use specific selector for app-password-input\n    console.log('üîë Filling password field...');\n    const passwordElement = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordElement);\n    await driver.sleep(60);\n    await passwordElement.clear();\n    await passwordElement.sendKeys(loginCase.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Find and click submit button - Use specific selector from HTML\n    const submitSelectors = [\n        '[data-test=\"login-submit\"]',  // From your HTML: data-test=\"login-submit\"\n        'input[type=\"submit\"]',        // From your HTML: input type=\"submit\"\n        'input[value=\"Login\"]',        // From your HTML: value=\"Login\"\n        '.btnSubmit'                   // From your HTML: class=\"btnSubmit\"\n    ];\n    \n    let submitButton = null;\n    for (const selector of submitSelectors) {\n        try {\n            submitButton = await findElementWithRetry(driver, By.css(selector));\n            console.log(`‚úÖ Found submit button with selector: ${selector}`);\n            break;\n        } catch (error) {\n            console.log(`‚ö†Ô∏è Submit selector ${selector} not found, trying next...`);\n        }\n    }\n    \n    if (!submitButton) {\n        throw new Error('Could not find submit button');\n    }\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // For input[type=\"submit\"], use click() method\n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response\n    await driver.sleep(1000);\n    \n    // Check for error messages\n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result by URL or presence of dashboard elements\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = 'Fail'; // Default to fail\n    \n    // Check various success indicators\n    const successIndicators = [\n        () => {\n            const expectedUrl = 'http://localhost:4200/#/account';\n            const isAccountUrl = currentUrl === expectedUrl || currentUrl === expectedUrl + '/';\n            if (isAccountUrl) console.log(`‚úÖ URL kh·ªõp v·ªõi trang t√†i kho·∫£n: ${currentUrl}`);\n            return isAccountUrl;\n        },\n        async () => {\n            const userMenuSelectors = [\n                '[data-test=\"user-menu\"]',\n                '[data-test=\"logout\"]',\n                '.user-menu',\n                'a[href*=\"logout\"]',\n                'button[data-test*=\"logout\"]'\n            ];\n            for (const selector of userMenuSelectors) {\n                try {\n                    const element = await driver.findElement(By.css(selector));\n                    if (await element.isDisplayed()) {\n                        console.log(`‚úÖ T√¨m th·∫•y ph·∫ßn t·ª≠ ng∆∞·ªùi d√πng: ${selector}`);\n                        return true;\n                    }\n                } catch (e) {\n                    console.log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y selector ${selector}`);\n                }\n            }\n            return false;\n        },\n    ];\n    \n    // Test success indicators\n    for (const indicator of successIndicators) {\n        try {\n            const isSuccess = typeof indicator === 'function' ? await indicator() : indicator;\n            if (isSuccess) {\n                actualResult = 'Success';\n                break;\n            }\n        } catch (error) {\n            // Continue to next indicator\n        }\n    }\n    \n    \n    // Log results\n    if (actualResult === 'Success') {\n        successfulLogins.push(loginCase);\n        console.log(`‚úÖ ${loginCase.testCaseID}: Login SUCCESS`);\n        console.log(`   Current URL: ${currentUrl}`);\n    } else {\n        failedLogins.push(loginCase.testCaseID);\n        console.log(`‚ö† ${loginCase.testCaseID}: Login FAILED`);\n        console.log(`   Current URL: ${currentUrl}`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result\n    expect(actualResult, `${loginCase.testCaseID} expected ${loginCase.expectedResult}`).to.equal(loginCase.expectedResult);\n    \n} catch (error) {\n    failedLogins.push(loginCase.testCaseID);\n    console.log(`‚ö† ${loginCase.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, loginCase.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "e7213751-525c-4c68-bfd9-4c93277f557e",
              "parentUUID": "2c92c48c-5037-4785-aefc-e4984ba6e146",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üîê Login Sign In-TC11: tc11@a.vn",
              "fullTitle": "üîê Login Test Suite üîê Login Sign In-TC11: tc11@a.vn",
              "timedOut": false,
              "duration": 23398,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting login test ${index + 1}/${testLogins.length}: ${loginCase.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(3000);\n    \n    // Navigate to login page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    \n    // Wait for login form to load completely\n    await driver.wait(until.elementLocated(By.id('email')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill login form\n    console.log('üìã Filling login form...');\n    console.log(`üìß Email: ${loginCase.email}`);\n    console.log(`üîë Password: ${loginCase.password.replace(/./g, '*')}`);\n    \n    // Fill email field\n    await waitAndFillElement(driver, By.id('email'), loginCase.email);\n    \n    // Fill password field - Use specific selector for app-password-input\n    console.log('üîë Filling password field...');\n    const passwordElement = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordElement);\n    await driver.sleep(60);\n    await passwordElement.clear();\n    await passwordElement.sendKeys(loginCase.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Find and click submit button - Use specific selector from HTML\n    const submitSelectors = [\n        '[data-test=\"login-submit\"]',  // From your HTML: data-test=\"login-submit\"\n        'input[type=\"submit\"]',        // From your HTML: input type=\"submit\"\n        'input[value=\"Login\"]',        // From your HTML: value=\"Login\"\n        '.btnSubmit'                   // From your HTML: class=\"btnSubmit\"\n    ];\n    \n    let submitButton = null;\n    for (const selector of submitSelectors) {\n        try {\n            submitButton = await findElementWithRetry(driver, By.css(selector));\n            console.log(`‚úÖ Found submit button with selector: ${selector}`);\n            break;\n        } catch (error) {\n            console.log(`‚ö†Ô∏è Submit selector ${selector} not found, trying next...`);\n        }\n    }\n    \n    if (!submitButton) {\n        throw new Error('Could not find submit button');\n    }\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // For input[type=\"submit\"], use click() method\n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response\n    await driver.sleep(1000);\n    \n    // Check for error messages\n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result by URL or presence of dashboard elements\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = 'Fail'; // Default to fail\n    \n    // Check various success indicators\n    const successIndicators = [\n        () => {\n            const expectedUrl = 'http://localhost:4200/#/account';\n            const isAccountUrl = currentUrl === expectedUrl || currentUrl === expectedUrl + '/';\n            if (isAccountUrl) console.log(`‚úÖ URL kh·ªõp v·ªõi trang t√†i kho·∫£n: ${currentUrl}`);\n            return isAccountUrl;\n        },\n        async () => {\n            const userMenuSelectors = [\n                '[data-test=\"user-menu\"]',\n                '[data-test=\"logout\"]',\n                '.user-menu',\n                'a[href*=\"logout\"]',\n                'button[data-test*=\"logout\"]'\n            ];\n            for (const selector of userMenuSelectors) {\n                try {\n                    const element = await driver.findElement(By.css(selector));\n                    if (await element.isDisplayed()) {\n                        console.log(`‚úÖ T√¨m th·∫•y ph·∫ßn t·ª≠ ng∆∞·ªùi d√πng: ${selector}`);\n                        return true;\n                    }\n                } catch (e) {\n                    console.log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y selector ${selector}`);\n                }\n            }\n            return false;\n        },\n    ];\n    \n    // Test success indicators\n    for (const indicator of successIndicators) {\n        try {\n            const isSuccess = typeof indicator === 'function' ? await indicator() : indicator;\n            if (isSuccess) {\n                actualResult = 'Success';\n                break;\n            }\n        } catch (error) {\n            // Continue to next indicator\n        }\n    }\n    \n    \n    // Log results\n    if (actualResult === 'Success') {\n        successfulLogins.push(loginCase);\n        console.log(`‚úÖ ${loginCase.testCaseID}: Login SUCCESS`);\n        console.log(`   Current URL: ${currentUrl}`);\n    } else {\n        failedLogins.push(loginCase.testCaseID);\n        console.log(`‚ö† ${loginCase.testCaseID}: Login FAILED`);\n        console.log(`   Current URL: ${currentUrl}`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result\n    expect(actualResult, `${loginCase.testCaseID} expected ${loginCase.expectedResult}`).to.equal(loginCase.expectedResult);\n    \n} catch (error) {\n    failedLogins.push(loginCase.testCaseID);\n    console.log(`‚ö† ${loginCase.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, loginCase.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "6214491e-9d91-4799-8cab-b824f28faf7e",
              "parentUUID": "2c92c48c-5037-4785-aefc-e4984ba6e146",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üîê Login Sign In-TC12: tc12@a.vn",
              "fullTitle": "üîê Login Test Suite üîê Login Sign In-TC12: tc12@a.vn",
              "timedOut": false,
              "duration": 23500,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting login test ${index + 1}/${testLogins.length}: ${loginCase.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(3000);\n    \n    // Navigate to login page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    \n    // Wait for login form to load completely\n    await driver.wait(until.elementLocated(By.id('email')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill login form\n    console.log('üìã Filling login form...');\n    console.log(`üìß Email: ${loginCase.email}`);\n    console.log(`üîë Password: ${loginCase.password.replace(/./g, '*')}`);\n    \n    // Fill email field\n    await waitAndFillElement(driver, By.id('email'), loginCase.email);\n    \n    // Fill password field - Use specific selector for app-password-input\n    console.log('üîë Filling password field...');\n    const passwordElement = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordElement);\n    await driver.sleep(60);\n    await passwordElement.clear();\n    await passwordElement.sendKeys(loginCase.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Find and click submit button - Use specific selector from HTML\n    const submitSelectors = [\n        '[data-test=\"login-submit\"]',  // From your HTML: data-test=\"login-submit\"\n        'input[type=\"submit\"]',        // From your HTML: input type=\"submit\"\n        'input[value=\"Login\"]',        // From your HTML: value=\"Login\"\n        '.btnSubmit'                   // From your HTML: class=\"btnSubmit\"\n    ];\n    \n    let submitButton = null;\n    for (const selector of submitSelectors) {\n        try {\n            submitButton = await findElementWithRetry(driver, By.css(selector));\n            console.log(`‚úÖ Found submit button with selector: ${selector}`);\n            break;\n        } catch (error) {\n            console.log(`‚ö†Ô∏è Submit selector ${selector} not found, trying next...`);\n        }\n    }\n    \n    if (!submitButton) {\n        throw new Error('Could not find submit button');\n    }\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // For input[type=\"submit\"], use click() method\n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response\n    await driver.sleep(1000);\n    \n    // Check for error messages\n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result by URL or presence of dashboard elements\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = 'Fail'; // Default to fail\n    \n    // Check various success indicators\n    const successIndicators = [\n        () => {\n            const expectedUrl = 'http://localhost:4200/#/account';\n            const isAccountUrl = currentUrl === expectedUrl || currentUrl === expectedUrl + '/';\n            if (isAccountUrl) console.log(`‚úÖ URL kh·ªõp v·ªõi trang t√†i kho·∫£n: ${currentUrl}`);\n            return isAccountUrl;\n        },\n        async () => {\n            const userMenuSelectors = [\n                '[data-test=\"user-menu\"]',\n                '[data-test=\"logout\"]',\n                '.user-menu',\n                'a[href*=\"logout\"]',\n                'button[data-test*=\"logout\"]'\n            ];\n            for (const selector of userMenuSelectors) {\n                try {\n                    const element = await driver.findElement(By.css(selector));\n                    if (await element.isDisplayed()) {\n                        console.log(`‚úÖ T√¨m th·∫•y ph·∫ßn t·ª≠ ng∆∞·ªùi d√πng: ${selector}`);\n                        return true;\n                    }\n                } catch (e) {\n                    console.log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y selector ${selector}`);\n                }\n            }\n            return false;\n        },\n    ];\n    \n    // Test success indicators\n    for (const indicator of successIndicators) {\n        try {\n            const isSuccess = typeof indicator === 'function' ? await indicator() : indicator;\n            if (isSuccess) {\n                actualResult = 'Success';\n                break;\n            }\n        } catch (error) {\n            // Continue to next indicator\n        }\n    }\n    \n    \n    // Log results\n    if (actualResult === 'Success') {\n        successfulLogins.push(loginCase);\n        console.log(`‚úÖ ${loginCase.testCaseID}: Login SUCCESS`);\n        console.log(`   Current URL: ${currentUrl}`);\n    } else {\n        failedLogins.push(loginCase.testCaseID);\n        console.log(`‚ö† ${loginCase.testCaseID}: Login FAILED`);\n        console.log(`   Current URL: ${currentUrl}`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result\n    expect(actualResult, `${loginCase.testCaseID} expected ${loginCase.expectedResult}`).to.equal(loginCase.expectedResult);\n    \n} catch (error) {\n    failedLogins.push(loginCase.testCaseID);\n    console.log(`‚ö† ${loginCase.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, loginCase.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "aa562231-622a-4358-b0bd-e34054e2042f",
              "parentUUID": "2c92c48c-5037-4785-aefc-e4984ba6e146",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üîê Login Sign In-TC13: tc13@a.vn",
              "fullTitle": "üîê Login Test Suite üîê Login Sign In-TC13: tc13@a.vn",
              "timedOut": false,
              "duration": 23534,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting login test ${index + 1}/${testLogins.length}: ${loginCase.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(3000);\n    \n    // Navigate to login page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    \n    // Wait for login form to load completely\n    await driver.wait(until.elementLocated(By.id('email')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill login form\n    console.log('üìã Filling login form...');\n    console.log(`üìß Email: ${loginCase.email}`);\n    console.log(`üîë Password: ${loginCase.password.replace(/./g, '*')}`);\n    \n    // Fill email field\n    await waitAndFillElement(driver, By.id('email'), loginCase.email);\n    \n    // Fill password field - Use specific selector for app-password-input\n    console.log('üîë Filling password field...');\n    const passwordElement = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordElement);\n    await driver.sleep(60);\n    await passwordElement.clear();\n    await passwordElement.sendKeys(loginCase.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Find and click submit button - Use specific selector from HTML\n    const submitSelectors = [\n        '[data-test=\"login-submit\"]',  // From your HTML: data-test=\"login-submit\"\n        'input[type=\"submit\"]',        // From your HTML: input type=\"submit\"\n        'input[value=\"Login\"]',        // From your HTML: value=\"Login\"\n        '.btnSubmit'                   // From your HTML: class=\"btnSubmit\"\n    ];\n    \n    let submitButton = null;\n    for (const selector of submitSelectors) {\n        try {\n            submitButton = await findElementWithRetry(driver, By.css(selector));\n            console.log(`‚úÖ Found submit button with selector: ${selector}`);\n            break;\n        } catch (error) {\n            console.log(`‚ö†Ô∏è Submit selector ${selector} not found, trying next...`);\n        }\n    }\n    \n    if (!submitButton) {\n        throw new Error('Could not find submit button');\n    }\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // For input[type=\"submit\"], use click() method\n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response\n    await driver.sleep(1000);\n    \n    // Check for error messages\n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result by URL or presence of dashboard elements\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = 'Fail'; // Default to fail\n    \n    // Check various success indicators\n    const successIndicators = [\n        () => {\n            const expectedUrl = 'http://localhost:4200/#/account';\n            const isAccountUrl = currentUrl === expectedUrl || currentUrl === expectedUrl + '/';\n            if (isAccountUrl) console.log(`‚úÖ URL kh·ªõp v·ªõi trang t√†i kho·∫£n: ${currentUrl}`);\n            return isAccountUrl;\n        },\n        async () => {\n            const userMenuSelectors = [\n                '[data-test=\"user-menu\"]',\n                '[data-test=\"logout\"]',\n                '.user-menu',\n                'a[href*=\"logout\"]',\n                'button[data-test*=\"logout\"]'\n            ];\n            for (const selector of userMenuSelectors) {\n                try {\n                    const element = await driver.findElement(By.css(selector));\n                    if (await element.isDisplayed()) {\n                        console.log(`‚úÖ T√¨m th·∫•y ph·∫ßn t·ª≠ ng∆∞·ªùi d√πng: ${selector}`);\n                        return true;\n                    }\n                } catch (e) {\n                    console.log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y selector ${selector}`);\n                }\n            }\n            return false;\n        },\n    ];\n    \n    // Test success indicators\n    for (const indicator of successIndicators) {\n        try {\n            const isSuccess = typeof indicator === 'function' ? await indicator() : indicator;\n            if (isSuccess) {\n                actualResult = 'Success';\n                break;\n            }\n        } catch (error) {\n            // Continue to next indicator\n        }\n    }\n    \n    \n    // Log results\n    if (actualResult === 'Success') {\n        successfulLogins.push(loginCase);\n        console.log(`‚úÖ ${loginCase.testCaseID}: Login SUCCESS`);\n        console.log(`   Current URL: ${currentUrl}`);\n    } else {\n        failedLogins.push(loginCase.testCaseID);\n        console.log(`‚ö† ${loginCase.testCaseID}: Login FAILED`);\n        console.log(`   Current URL: ${currentUrl}`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result\n    expect(actualResult, `${loginCase.testCaseID} expected ${loginCase.expectedResult}`).to.equal(loginCase.expectedResult);\n    \n} catch (error) {\n    failedLogins.push(loginCase.testCaseID);\n    console.log(`‚ö† ${loginCase.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, loginCase.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "fd24cd4d-cae9-4289-80cd-3c3da47b45dc",
              "parentUUID": "2c92c48c-5037-4785-aefc-e4984ba6e146",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "üîê Login Sign In-TC14: user@domain.com",
              "fullTitle": "üîê Login Test Suite üîê Login Sign In-TC14: user@domain.com",
              "timedOut": false,
              "duration": 12980,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(testConfig.timeouts.testCase);\n\ntry {\n    console.log(`\\nüîÑ Starting login test ${index + 1}/${testLogins.length}: ${loginCase.testCaseID}`);\n    \n    // Fresh start - navigate to homepage\n    await driver.get(testConfig.baseUrl);\n    await driver.sleep(3000);\n    \n    // Navigate to login page\n    await waitAndClick(driver, By.css('[data-test=\"nav-sign-in\"]'));\n    \n    // Wait for login form to load completely\n    await driver.wait(until.elementLocated(By.id('email')), testConfig.timeouts.elementWait);\n    await driver.sleep(200); // Wait for form to be fully interactive\n    \n    // Reset any existing form state\n    await resetFormState(driver);\n    \n    // Fill login form\n    console.log('üìã Filling login form...');\n    console.log(`üìß Email: ${loginCase.email}`);\n    console.log(`üîë Password: ${loginCase.password.replace(/./g, '*')}`);\n    \n    // Fill email field\n    await waitAndFillElement(driver, By.id('email'), loginCase.email);\n    \n    // Fill password field - Use specific selector for app-password-input\n    console.log('üîë Filling password field...');\n    const passwordElement = await findElementWithRetry(driver, By.css('app-password-input input[type=\"password\"]'));\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", passwordElement);\n    await driver.sleep(60);\n    await passwordElement.clear();\n    await passwordElement.sendKeys(loginCase.password);\n    \n    console.log('‚úÖ Form filled, submitting...');\n    \n    // Find and click submit button - Use specific selector from HTML\n    const submitSelectors = [\n        '[data-test=\"login-submit\"]',  // From your HTML: data-test=\"login-submit\"\n        'input[type=\"submit\"]',        // From your HTML: input type=\"submit\"\n        'input[value=\"Login\"]',        // From your HTML: value=\"Login\"\n        '.btnSubmit'                   // From your HTML: class=\"btnSubmit\"\n    ];\n    \n    let submitButton = null;\n    for (const selector of submitSelectors) {\n        try {\n            submitButton = await findElementWithRetry(driver, By.css(selector));\n            console.log(`‚úÖ Found submit button with selector: ${selector}`);\n            break;\n        } catch (error) {\n            console.log(`‚ö†Ô∏è Submit selector ${selector} not found, trying next...`);\n        }\n    }\n    \n    if (!submitButton) {\n        throw new Error('Could not find submit button');\n    }\n    \n    await driver.executeScript(\"arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});\", submitButton);\n    await driver.sleep(100);\n    \n    // For input[type=\"submit\"], use click() method\n    try {\n        await submitButton.click();\n    } catch (error) {\n        console.log('‚ö†Ô∏è Using JavaScript click for submit');\n        await driver.executeScript(\"arguments[0].click();\", submitButton);\n    }\n    \n    // Wait for response\n    await driver.sleep(1000);\n    \n    // Check for error messages\n    const errorMessage = await checkForErrorMessages(driver);\n    \n    // Check result by URL or presence of dashboard elements\n    const currentUrl = await driver.getCurrentUrl();\n    let actualResult = 'Fail'; // Default to fail\n    \n    // Check various success indicators\n    const successIndicators = [\n        () => {\n            const expectedUrl = 'http://localhost:4200/#/account';\n            const isAccountUrl = currentUrl === expectedUrl || currentUrl === expectedUrl + '/';\n            if (isAccountUrl) console.log(`‚úÖ URL kh·ªõp v·ªõi trang t√†i kho·∫£n: ${currentUrl}`);\n            return isAccountUrl;\n        },\n        async () => {\n            const userMenuSelectors = [\n                '[data-test=\"user-menu\"]',\n                '[data-test=\"logout\"]',\n                '.user-menu',\n                'a[href*=\"logout\"]',\n                'button[data-test*=\"logout\"]'\n            ];\n            for (const selector of userMenuSelectors) {\n                try {\n                    const element = await driver.findElement(By.css(selector));\n                    if (await element.isDisplayed()) {\n                        console.log(`‚úÖ T√¨m th·∫•y ph·∫ßn t·ª≠ ng∆∞·ªùi d√πng: ${selector}`);\n                        return true;\n                    }\n                } catch (e) {\n                    console.log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y selector ${selector}`);\n                }\n            }\n            return false;\n        },\n    ];\n    \n    // Test success indicators\n    for (const indicator of successIndicators) {\n        try {\n            const isSuccess = typeof indicator === 'function' ? await indicator() : indicator;\n            if (isSuccess) {\n                actualResult = 'Success';\n                break;\n            }\n        } catch (error) {\n            // Continue to next indicator\n        }\n    }\n    \n    \n    // Log results\n    if (actualResult === 'Success') {\n        successfulLogins.push(loginCase);\n        console.log(`‚úÖ ${loginCase.testCaseID}: Login SUCCESS`);\n        console.log(`   Current URL: ${currentUrl}`);\n    } else {\n        failedLogins.push(loginCase.testCaseID);\n        console.log(`‚ö† ${loginCase.testCaseID}: Login FAILED`);\n        console.log(`   Current URL: ${currentUrl}`);\n        if (errorMessage) {\n            console.log(`   Error: ${errorMessage}`);\n        }\n    }\n    \n    // Compare with expected result\n    expect(actualResult, `${loginCase.testCaseID} expected ${loginCase.expectedResult}`).to.equal(loginCase.expectedResult);\n    \n} catch (error) {\n    failedLogins.push(loginCase.testCaseID);\n    console.log(`‚ö† ${loginCase.testCaseID}: Error - ${error.message}`);\n    \n    // Take screenshot for debugging\n    await takeErrorScreenshot(driver, loginCase.testCaseID);\n    \n    throw error;\n}",
              "err": {},
              "uuid": "038e7faf-4567-40d7-8857-370eec4075f3",
              "parentUUID": "2c92c48c-5037-4785-aefc-e4984ba6e146",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4b19a47d-bb62-4798-bb9c-d2df19fa318f",
            "d5363e61-7424-4ee1-a435-d6ab7ab569b8",
            "bd98d4ca-98db-4ced-a33d-56c989c90d62",
            "1ddb1005-62a6-4666-b46e-5574d6b372ad",
            "5199ee57-981b-4bc8-8d81-e4fd74ed4776",
            "50b54936-d337-4cce-ae44-6e5ed28481aa",
            "e33b82a0-5d02-4558-b8df-cfa1d0d36b0b",
            "e2b2b6d8-d12d-4ac3-a17e-a3cba82cbd0b",
            "e7213751-525c-4c68-bfd9-4c93277f557e",
            "6214491e-9d91-4799-8cab-b824f28faf7e",
            "aa562231-622a-4358-b0bd-e34054e2042f",
            "fd24cd4d-cae9-4289-80cd-3c3da47b45dc",
            "038e7faf-4567-40d7-8857-370eec4075f3"
          ],
          "failures": [
            "96e68f98-48b2-4cc9-acbf-4fc1d9004468"
          ],
          "pending": [],
          "skipped": [],
          "duration": 287235,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 120000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "test-report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "reports",
        "reportFilename": "test-report"
      },
      "version": "6.2.0"
    }
  }
}